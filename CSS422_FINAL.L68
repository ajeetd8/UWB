00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 6/1/2018 2:00:08 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Final submission file. (Main executable)
00000000                             3  * Written by : Haram, Byeonggeun, Erik
00000000                             4  * Date       : June 2 2018
00000000                             5  * Description: The code will disassemble from loaded memory
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00001000                             8  START:  org             $1000
00001000                             9                  * Setting the stack address.
00001000  4FF9 00100000             10                  lea             STACK,sp 
00001006  4DF9 00007000             11                  lea             DISASSEMBLE_FROM,a6     move value of DISASSEMLE_FROM
0000100C                            12  
0000100C                            13  * Prompt for user to enter data        
0000100C                            14  PROMPT_START
0000100C                            15          * Prompt user with message start address
0000100C  6100 01B8                 16          bsr             PROMPT_START_ADDRESS
00001010                            17          * Collect user input and store value in string and length in str_length
00001010  6100 016E                 18          bsr             collect     
00001014                            19          * Convert string to hex and store result in swap_hex variable
00001014  6100 01E4                 20          bsr             str_to_hex  
00001018                            21          * Bounds checking for valid start address
00001018  6100 00DA                 22          bsr             check_start_bounds     
0000101C                            23          * If input error detected branch to prompt_start
0000101C  BA3C 0001                 24          cmp.b           #$01,d5
00001020  67EA                      25          beq             prompt_start
00001022                            26  PROMPT_END
00001022                            27          * Prompt user with message for end address
00001022  6100 0188                 28          bsr             prompt_end_address
00001026                            29          * Collect user input and store value in string and length in str_length
00001026  6100 0158                 30          bsr             collect
0000102A                            31          * Convert string to hex and store result in swap_hex variable
0000102A  6100 01CE                 32          bsr             str_to_hex
0000102E                            33          * Bounds checking for valid end address
0000102E  6100 0090                 34          bsr             check_end_bounds
00001032                            35          * If input error detected branch to prompt_end
00001032  BA3C 0001                 36          cmp.b           #$01,d5
00001036  67EA                      37          beq             prompt_end
00001038                            38          * Else if address is valid load into a6 
00001038  41F9 000032CC             39          lea             start_hex,a0
0000103E  2C50                      40          move.l          (a0),a6
00001040                            41  
00001040                            42          * Clear data registers
00001040  6100 0130                 43          bsr             clear_data
00001044                            44  
00001044  6000 023A                 45          bra             MAIN_LOOP
00001048                            46  
00001048                            47  
00001048                            48  CHECK_BOUNDS: * Checks bounds of user input stored in swap_hex variable.
00001048                            49  * Clear data registers
00001048  6100 0128                 50          bsr             clear_data
0000104C                            51          * Branch if str_length is greater than 8
0000104C  0C79 0008 000032DC        52          cmpi.w          #$08,str_length
00001054  6E00 0048                 53          bgt             cb_error_1
00001058                            54          * Move value into memory into register to compare byte only and faster access
00001058  2439 000032D8             55          move.l          swap_hex,d2
0000105E                            56  CB_IF_LOWER_BOUND
0000105E                            57          * Branch if d2 is less than #$
0000105E  0C79 0004 000032DC        58          cmpi.w          #$04,str_length
00001066  6F00 0010                 59          ble             cb_else_lower_bound
0000106A  0C82 00003500             60          cmpi.l          #LOWER_BOUND,d2
00001070  6500 003C                 61          blo             cb_error_2
00001074  6000 000A                 62          bra             cb_if_upper_bound
00001078                            63  CB_ELSE_LOWER_BOUND
00001078                            64          * Else compare to word and branch if less than #$
00001078  0C42 3500                 65          cmpi.w          #LOWER_BOUND,d2
0000107C  6500 0030                 66          blo             cb_error_2   
00001080                            67  CB_IF_UPPER_BOUND
00001080                            68          * Branch if d2 is less than #$
00001080  0C79 0004 000032DC        69          cmpi.w          #$04,str_length
00001088  6500 0010                 70          blo             cb_else_upper_bound
0000108C  0C82 00009FFF             71          cmpi.l          #UPPER_BOUND,d2
00001092  6200 001A                 72          bhi             cb_error_2
00001096  6000 0026                 73          bra             cb_end
0000109A                            74  CB_ELSE_UPPER_BOUND
0000109A                            75          * Else compare to word and branch if less than #$
0000109A                            76          *cmpi.w          #$7000,d2
0000109A                            77          *bgt             cb_error_2
0000109A  6000 0022                 78          bra             cb_end
0000109E                            79  CB_ERROR_1 
0000109E                            80          * "INVALID INPUT: too long"
0000109E  43F9 000027FE             81          lea             error_1,a1
000010A4  303C 000D                 82          move.w          #13,d0
000010A8  4E4F                      83          trap            #15
000010AA  6000 000E                 84          bra             cb_set_flag
000010AE                            85  CB_ERROR_2 
000010AE                            86          * "INVALID INPUT: not within range"
000010AE  43F9 00002816             87          lea             error_2,a1
000010B4  303C 000D                 88          move.w          #13,d0
000010B8  4E4F                      89          trap            #15
000010BA                            90  CB_SET_FLAG        
000010BA  1A3C 0001                 91          move.b          #$01,d5
000010BE                            92  CB_END
000010BE  4E75                      93          rts
000010C0                            94  
000010C0                            95  CHECK_END_BOUNDS: * Bounds checking for end address range
000010C0                            96          * Check general bounds
000010C0  6186                      97          bsr             check_bounds
000010C2                            98          * Check for invalid input
000010C2  BA3C 0001                 99          cmp.b           #$01,d5
000010C6  6700 002A                100          beq             ceb_end
000010CA                           101          * If no error with swap_hex
000010CA  41F9 000032D8            102          lea             swap_hex,a0
000010D0  23D0 000032C6            103          move.l        (a0),end_hex
000010D6                           104          * Then check that start < end
000010D6  2210                     105          move.l          (a0),d1
000010D8  2039 000032CC            106          move.l          start_hex,d0
000010DE                           107          if.l d1 <LE> d0 then.s
000010E2  1A3C 0001                108                  move.b #$01,d5
000010E6  43F9 00002854            109                  lea             error_4,a1
000010EC  303C 000D                110                  move.w          #13,d0
000010F0  4E4F                     111                  trap            #15
000010F2                           112          endi
000010F2                           113  CEB_END       
000010F2  4E75                     114          rts
000010F4                           115  
000010F4                           116  CHECK_START_BOUNDS: * Bounds checking for start address range
000010F4                           117          * Check general bounds
000010F4  6100 FF52                118          bsr             check_bounds
000010F8                           119          * Check for invalid input
000010F8  BA3C 0001                120          cmp.b           #$01,d5
000010FC  6700 000E                121          beq             csb_end
00001100                           122          * If no error with swap_hex
00001100  41F9 000032D8            123          lea             swap_hex,a0
00001106  23D0 000032CC            124          move.l          (a0),start_hex
0000110C                           125  CSB_END     
0000110C  4E75                     126          rts
0000110E                           127  
0000110E                           128  
0000110E                           129  
0000110E                           130  
0000110E                           131  
0000110E                           132  CHECK_RESPONSE: * Checks response to user reprompt
0000110E                           133          * Clear data registers
0000110E  6100 0062                134          bsr             clear_data
00001112                           135          * Branch if str_length is greater than 8
00001112  0C79 0001 000032DC       136          cmpi.w          #$01,str_length
0000111A  6E00 0034                137          bgt             cr_error_1
0000111E                           138          * Move value in memory into register to compare byte only and faster acess
0000111E  1439 000032D0            139          move.b          string,d2
00001124                           140          * Branch to the_end if input is 'n' or 'N'
00001124                           141          if.b d2 <EQ> #$4e or.b d2 <EQ> #$6e then.s
00001130                           142                  * Set d5 to 3 and end
00001130  1A3C 0003                143                  move.b          #$03,d5
00001134  6000 003A                144                  bra             cr_end
00001138                           145          endi
00001138                           146          * Branch to user_input if input is 'y' or 'Y'
00001138                           147          if.b d2 <EQ> #$59 or.b d2 <EQ> #$79 then.s
00001144                           148                  * Set d5 to 2 and end
00001144  1A3C 0002                149                  move.b          #$02,d5
00001148  6000 0026                150                  bra             cr_end
0000114C                           151          endi
0000114C                           152          * Else branch to .error_2
0000114C  6000 0012                153          bra             cr_error_2
00001150                           154  CR_ERROR_1 
00001150                           155          * "INVALID INPUT: too long"
00001150  43F9 000027FE            156          lea             error_1,a1
00001156  303C 000D                157          move.w          #13,d0
0000115A  4E4F                     158          trap            #15
0000115C  6000 000E                159          bra             cr_set_flag
00001160                           160  CR_ERROR_2 
00001160                           161          * "INVALID INPUT: not recognized"
00001160  43F9 00002836            162          lea             error_3,a1
00001166  303C 000D                163          move.w          #13,d0
0000116A  4E4F                     164          trap            #15
0000116C                           165  CR_SET_FLAG        
0000116C  1A3C 0001                166          move.b          #$01,d5
00001170                           167  CR_END        
00001170  4E75                     168          rts
00001172                           169  
00001172                           170  
00001172                           171  * Subroutines - Alphabetical
00001172                           172  CLEAR_DATA: * Clears data registers d0-d5
00001172  4280                     173          clr.l           d0
00001174  4281                     174          clr.l           d1
00001176  4282                     175          clr.l           d2
00001178  4283                     176          clr.l           d3
0000117A  4284                     177          clr.l           d4
0000117C  4285                     178          clr.l           d5
0000117E  4E75                     179          rts
00001180                           180  
00001180                           181  COLLECT: * Collects user input and stores value in string variable and length in str_length
00001180                           182          * Load address of string into a1
00001180  43F9 000032D0            183          lea             string,a1   
00001186                           184          * Clear long value at a1
00001186  22BC 00000000            185          move.l          #$00,(a1)
0000118C                           186          * Collect console input
0000118C  303C 0002                187          move.w          #2,d0
00001190  4E4F                     188          trap            #15
00001192  33C1 000032DC            189          move.w          d1,str_length
00001198  4E75                     190          rts
0000119A                           191  
0000119A                           192  PAUSE:
0000119A                           193          * Reset counter to 0
0000119A  4244                     194          clr             d4
0000119C  43F9 000028F5            195          lea             prompt_6,a1
000011A2  303C 000D                196          move.w          #13,d0
000011A6  4E4F                     197          trap            #15
000011A8                           198          * Collect enter
000011A8  61D6                     199          bsr             collect
000011AA  4E75                     200          rts
000011AC                           201  
000011AC                           202  PROMPT_END_ADDRESS: * Collects end address from console
000011AC                           203          * "Enter ending address with all letters. Range=[,]"
000011AC  43F9 00002910            204          lea             prompt_7,a1
000011B2  303C 000D                205          move.w          #13,d0
000011B6  4E4F                     206          trap            #15   
000011B8                           207          * "$"_
000011B8  43F9 000028AB            208          lea             prompt_2,a1
000011BE  303C 000E                209          move.w          #14,d0
000011C2  4E4F                     210          trap            #15
000011C4  4E75                     211          rts
000011C6                           212  
000011C6                           213  PROMPT_START_ADDRESS: * Collects start address from console
000011C6                           214          * "Enter starting address with all letters. Range=[,]"
000011C6  43F9 0000287F            215          lea             prompt_1,a1
000011CC  303C 000D                216          move.w          #13,d0
000011D0  4E4F                     217          trap            #15   
000011D2                           218          * "$"_
000011D2  43F9 000028AB            219          lea             prompt_2,a1
000011D8  303C 000E                220          move.w          #14,d0
000011DC  4E4F                     221          trap            #15
000011DE  4E75                     222          rts
000011E0                           223  
000011E0                           224  REPROMPT: * Reprompt for another reading or ending of program
000011E0                           225          * "Would you like to disassemble again? (Y/N)"
000011E0  43F9 000028C8            226          lea             prompt_4,a1
000011E6  303C 000D                227          move.w          #13,d0
000011EA  4E4F                     228          trap            #15     
000011EC                           229          * ">"_
000011EC  43F9 000028F3            230          lea             prompt_5,a1
000011F2  303C 000E                231          move.w          #14,d0
000011F6  4E4F                     232          trap            #15
000011F8  4E75                     233          rts
000011FA                           234  
000011FA                           235  STR_TO_HEX: * Converts string to hexadecimal
000011FA                           236          * Clear data registers
000011FA  43F9 000032D0            237          lea             string,a1
00001200  6100 FF70                238          bsr             clear_data
00001204                           239          * For 1 to str_length do the following
00001204                           240          for.w d0 = #1 to str_length do.s
0000120A                           241                  * Clear d5 to reset flag
0000120A  4245                     242                  clr             d5
0000120C                           243                  * Move BYTE from address containing string data into d2
0000120C  1419                     244                  move.b          (a1)+,d2
0000120E                           245                  * If BYTE in d2 is greater than #$60 then subtract #$57
0000120E                           246                  if.b d2 <GT> #$60 then.s
00001214  0402 0057                247                          subi.b          #$57,d2
00001218  1A3C 0001                248                          move.b          #$01,d5
0000121C                           249                  endi
0000121C                           250                  * Branch if already subtracted
0000121C  0C05 0001                251                  cmpi.b          #$01,d5
00001220  6700 0016                252                  beq             sth_skip_subi
00001224                           253                  * If BYTE in d2 is less than #$40 then subtract #$30
00001224                           254                  if.b d2 <LT> #$40 then.s
0000122A  0402 0030                255                          subi.b          #$30,d2
0000122E                           256                  endi
0000122E                           257                  * If BYTE in d2 is greater than #$40 then subtract #$37
0000122E                           258                  if.b d2 <GT> #$40 then.s
00001234  0402 0037                259                          subi.b          #$37,d2
00001238                           260                  endi
00001238                           261  STH_SKIP_SUBI
00001238                           262                  * Add BYTE to d3 and lsl
00001238  D602                     263                  add.b           d2,d3
0000123A                           264                  *  skip lsl when str_length and d0 are equal
0000123A  B079 000032DC            265                  cmp.w           str_length,d0
00001240  6700 0004                266                  beq             sth_skip_shift
00001244  E98B                     267                  lsl.l           #$04,d3
00001246                           268  STH_SKIP_SHIFT
00001246                           269          endf
00001250                           270          * Move LONG data from d3 into variable swap_hex
00001250  23C3 000032D8            271          move.l          d3,swap_hex                  
00001256  4E75                     272          rts
00001258                           273  
00001258                           274  * Instruction for terminating the program
00001258                           275  DONE
00001258                           276          * Reprompt for another reading or end program
00001258  6186                     277          bsr             reprompt
0000125A                           278          * Collects user input and stores value in string variable and length in str_length
0000125A  6100 FF24                279          bsr             collect
0000125E                           280          * React to user
0000125E  6100 FEAE                281          bsr             check_response     
00001262                           282          * If flag at three branch to the_end
00001262  BA3C 0003                283          cmp.b           #$03,d5
00001266  6700 2034                284          beq             EXIT_PROGRAM
0000126A                           285          * If flag at two branch to prompt_start
0000126A  BA3C 0002                286          cmp.b           #$02,d5
0000126E  6700 FD9C                287          beq             prompt_start
00001272                           288          * If flag detected branch to done
00001272  BA3C 0001                289          cmp.b           #$01,d5
00001276  67E0                     290          beq             done
00001278                           291  
00001278                           292  * From here, he need to write our disassembly code
00001278                           293  *****************************************************************************************
00001278                           294  * Loop 20 times, and get the user enter.
00001278  13FC 0000 000032C4       295          move.b          #$00,MAIN_LOOP_COUNT
00001280                           296  * Iteration loop start from here
00001280                           297  MAIN_LOOP
00001280                           298          * Clear three bit instructions
00001280  6100 1772                299          bsr             CLEAR_ALL_BIT_S
00001284                           300  
00001284                           301          * Check for the terminal Condition.
00001284  2E0E                     302          move.l          a6,d7
00001286  BEB9 000032C6            303          cmp.l           END_HEX,d7           Terminal condition check (It will be changed later)
0000128C  62CA                     304          bhi             DONE            Terminating the program.
0000128E                           305  
0000128E                           306  
0000128E                           307          * Check cycle(20) condition.
0000128E  0C39 0014 000032C4       308          cmp.b           #20,MAIN_LOOP_COUNT
00001296  6C00 00D6                309          bge             HALT
0000129A                           310  
0000129A                           311          ** Add 1 to the cycle
0000129A  1E39 000032C4            312          move.b          MAIN_LOOP_COUNT,d7
000012A0  5207                     313          addi.b          #1,d7
000012A2  13C7 000032C4            314          move.b          d7,MAIN_LOOP_COUNT
000012A8                           315  
000012A8                           316          * Show current pc
000012A8  6100 0FBC                317          bsr             ADDRESS_OUT
000012AC                           318  
000012AC                           319          * Load initial instruction
000012AC  33DE 000032C2            320          move.w          (a6)+,INITIAL_INSTRUCTION
000012B2                           321  
000012B2                           322          * Save Initial instruction to d7 register
000012B2                           323          *move.w          INITIAL_INSTRUCTION,d7
000012B2                           324          
000012B2                           325          *-------------------
000012B2                           326          * case 1 addi, subi
000012B2  0C39 0010 000032C2       327          cmp.b           #$10,INITIAL_INSTRUCTION
000012BA  6500 00D8                328          blo             MC_ADDI_SUBI
000012BE                           329  
000012BE                           330          * case 2 move.b
000012BE  0C39 0020 000032C2       331          cmp.b           #$20,INITIAL_INSTRUCTION
000012C6  6500 0162                332          blo             MC_MOVE_B
000012CA                           333  
000012CA                           334          * case 3 move.l, movea.l
000012CA  0C39 0030 000032C2       335          cmp.b           #$30,INITIAL_INSTRUCTION
000012D2  6500 0182                336          blo             MC_MOVE_L_MOVEA_L
000012D6                           337  
000012D6                           338          * case 4 move.w, movea.w
000012D6  0C39 0040 000032C2       339          cmp.b           #$40,INITIAL_INSTRUCTION
000012DE  6500 01BA                340          blo             MC_MOVE_W_MOVEA_W
000012E2                           341  
000012E2                           342          * case 5 clr, nop, rts, jsr, movem, lea
000012E2  0C39 0050 000032C2       343          cmp.b           #$50,INITIAL_INSTRUCTION
000012EA  6500 01EE                344          blo             MC_CLR_LEA
000012EE                           345  
000012EE                           346          * case 6 addq      
000012EE  0C39 0060 000032C2       347          cmp.b           #$60,INITIAL_INSTRUCTION
000012F6  6500 0608                348          blo             MC_ADDQ
000012FA                           349  
000012FA                           350          * case 7 bcc, bgt, ble
000012FA  0C39 0070 000032C2       351          cmp.b           #$70,INITIAL_INSTRUCTION
00001302  6500 069C                352          blo             MC_BCGL
00001306                           353  
00001306                           354          * case 8 moveq
00001306  0C39 0080 000032C2       355          cmp.b           #$80,INITIAL_INSTRUCTION
0000130E  6500 07D2                356          blo             MC_MOVEQ
00001312                           357  
00001312                           358          * case 9 or, divu
00001312  0C39 0090 000032C2       359          cmp.b           #$90,INITIAL_INSTRUCTION
0000131A  6500 0826                360          blo             MC_OR_DIVU
0000131E                           361  
0000131E                           362          * case 10 sub
0000131E  0C39 00A0 000032C2       363          cmp.b           #$a0,INITIAL_INSTRUCTION
00001326  6500 08E8                364          blo             MC_SUB
0000132A                           365  
0000132A                           366          * Invalid input, show message
0000132A  0C39 00B0 000032C2       367          cmp.b          #$b0,INITIAL_INSTRUCTION
00001332  6500 0ECA                368          blo             INVALID_S             
00001336                           369  
00001336                           370          * case 11 cmp
00001336  0C39 00C0 000032C2       371          cmp.b           #$c0,INITIAL_INSTRUCTION
0000133E  6500 0900                372          blo             MC_CMP
00001342                           373          
00001342                           374          * case 12 and, muls, mulu
00001342  0C39 00D0 000032C2       375          cmp.b           #$d0,INITIAL_INSTRUCTION
0000134A  6500 0918                376          blo             MC_AND_MULU
0000134E                           377  
0000134E                           378          * case 13 add, adda
0000134E  0C39 00E0 000032C2       379          cmp.b           #$e0,INITIAL_INSTRUCTION
00001356  6500 0994                380          blo             MC_ADD_ADDA
0000135A                           381  
0000135A                           382          * case 14 asr, asl, lsr, lsl, ror, rol
0000135A  0C39 00F0 000032C2       383          cmp.b           #$f0,INITIAL_INSTRUCTION
00001362  6500 0A04                384          blo             MC_ASR_ROL
00001366                           385          
00001366  6000 0E96                386          bra             INVALID_S
0000136A                           387          
0000136A  6000 FF14                388          bra             MAIN_LOOP
0000136E                           389  
0000136E                           390  * Iteration end here
0000136E                           391  *******************************************************************************************
0000136E                           392  
0000136E                           393  
0000136E                           394  *******************************************************************************************
0000136E                           395  * Halting the simulator
0000136E                           396  HALT
0000136E  13FC 0000 000032C4       397          move.b          #$00,MAIN_LOOP_COUNT         Clear the Loop count
00001376                           398          
00001376                           399          * Getting the 'Enter' Key from the user
00001376                           400          * Once you get the enter, clear the screen
00001376                           401          * go back to the routine
00001376                           402  
00001376  6100 1344                403          bsr             PRESS_ENTER_S
0000137A  6100 000A                404          bsr             WAIT_ENTER
0000137E                           405  
0000137E  6100 134A                406          bsr             CLEAR_SCREEN
00001382  6000 FEFC                407          bra             MAIN_LOOP
00001386                           408  
00001386                           409  * ----------------------------------
00001386                           410  WAIT_ENTER
00001386  103C 0005                411          move.b          #5,d0
0000138A  4E4F                     412          trap            #15
0000138C                           413  
0000138C                           414  
0000138C                           415          
0000138C  B23C 000D                416          cmp.b           #$0d,d1
00001390  66F4                     417          bne             WAIT_ENTER
00001392  4E75                     418          rts
00001394                           419  * ----------------------------------
00001394                           420  *******************************************************************************************
00001394                           421  
00001394                           422  
00001394                           423  *******************************************************************************************
00001394                           424  * Mnemonic disassmbly start here
00001394                           425  
00001394                           426  * Addi Subi
00001394                           427  MC_ADDI_SUBI
00001394                           428  MAS_SUBI
00001394  0C39 0004 000032C2       429          cmp.b           #4,INITIAL_INSTRUCTION
0000139C  6600 0022                430          bne             MAS_ADDI
000013A0                           431  
000013A0  6100 15D8                432          bsr             INITIAL_TWO_EA_LOAD_SIZE
000013A4  6100 1E3C                433          bsr             SIZE_CONVERT_TYPE_ONE
000013A8  6100 005A                434          bsr             MC_ADDI_SUBI_INST_CONVERTOR
000013AC  6100 1678                435          bsr             ADDRESS_READ_DECISION_LOAD
000013B0                           436          
000013B0  6100 1D72                437          bsr             IS_VALID
000013B4  6100 12EA                438          bsr             TAB
000013B8  6100 0F74                439          bsr             SUBI_S
000013BC  6000 0032                440          bra             MAS_OPERAND
000013C0                           441  MAS_ADDI
000013C0  0C39 0006 000032C2       442          cmp.b           #6,INITIAL_INSTRUCTION
000013C8  6600 0022                443          bne             MAS_INVALID
000013CC                           444          
000013CC  6100 15AC                445          bsr             INITIAL_TWO_EA_LOAD_SIZE
000013D0  6100 1E10                446          bsr             SIZE_CONVERT_TYPE_ONE
000013D4  6100 002E                447          bsr             MC_ADDI_SUBI_INST_CONVERTOR
000013D8  6100 164C                448          bsr             ADDRESS_READ_DECISION_LOAD
000013DC                           449  
000013DC  6100 1D46                450          bsr             IS_VALID
000013E0  6100 12BE                451          bsr             TAB
000013E4  6100 0F3A                452          bsr             ADDI_S
000013E8  6000 0006                453          bra             MAS_OPERAND
000013EC                           454  MAS_INVALID
000013EC  6000 0E10                455          bra             INVALID_S
000013F0                           456  MAS_OPERAND
000013F0  6100 0E3C                457          bsr             SIZE_TAG_S
000013F4  6100 12AA                458          bsr             TAB
000013F8  6100 1C70                459          bsr             INITIAL_FOUR_EA_LOAD_OUT
000013FC  6100 1294                460          bsr             NEWLINE
00001400  6000 FE7E                461          bra             MAIN_LOOP
00001404                           462  
00001404                           463  MC_ADDI_SUBI_INST_CONVERTOR
00001404                           464          * It will convert addi instruction to have similar property with move function, so that
00001404                           465          * I can invoke the existing function such as
00001404                           466          * ADDRESS_READ_DECISION_LOAD
00001404                           467          * INITIAL_FOUR_EA_LOAD_OUT
00001404                           468  
00001404  13F9 000032B6 000032B5   469          move.b          SRC_MODE,DEST_MODE
0000140E  13F9 000032B7 000032B4   470          move.b          SRC_REGISTER,DEST_REGISTER
00001418  13FC 0007 000032B6       471          move.b          #7,SRC_MODE
00001420  13FC 0004 000032B7       472          move.b          #4,SRC_REGISTER
00001428                           473  
00001428  4E75                     474          rts
0000142A                           475  
0000142A                           476  *Mnemonic: move.b
0000142A                           477  MC_MOVE_B
0000142A  6100 1E52                478          bsr             SIZE_BYTE
0000142E  6100 150A                479          bsr             INITIAL_FOUR_EA_LOAD
00001432  6100 15F2                480          bsr             ADDRESS_READ_DECISION_LOAD
00001436                           481  
00001436  6100 1CEC                482          bsr             IS_VALID
0000143A  6100 1264                483          bsr             TAB
0000143E  6100 0EFC                484          bsr             MOVE_S                Print out the instruction.
00001442  6100 0DEA                485          bsr             SIZE_TAG_S
00001446  6100 1258                486          bsr             TAB
0000144A                           487  
0000144A  6100 1C1E                488          bsr             INITIAL_FOUR_EA_LOAD_OUT
0000144E                           489  
0000144E  6100 1242                490          bsr             NEWLINE                 Newline
00001452  6000 FE2C                491          bra             MAIN_LOOP
00001456                           492  
00001456                           493  * Mnemonic: move.l, movea.l
00001456                           494  MC_MOVE_L_MOVEA_L
00001456  6100 1E3A                495          bsr             SIZE_LONG
0000145A  6100 14DE                496          bsr             INITIAL_FOUR_EA_LOAD
0000145E  6100 15C6                497          bsr             ADDRESS_READ_DECISION_LOAD
00001462  6100 1CC0                498          bsr             IS_VALID
00001466  6100 1238                499          bsr             TAB
0000146A                           500  
0000146A                           501  MMLML_MOVEA_OUT
0000146A  0C39 0001 000032B5       502          cmp.b           #1,DEST_MODE
00001472  6600 000A                503          bne             MMLML_MOVE_OUT
00001476  6100 0ED2                504          bsr             MOVEA_S
0000147A  6000 000A                505          bra             MMLML_MOVE_OPERAND
0000147E                           506  MMLML_MOVE_OUT
0000147E  6100 0EBC                507          bsr             MOVE_S
00001482  6000 0002                508          bra             MMLML_MOVE_OPERAND
00001486                           509  MMLML_MOVE_OPERAND
00001486  6100 0DA6                510          bsr             SIZE_TAG_S
0000148A  6100 1214                511          bsr             TAB
0000148E  6100 1BDA                512          bsr             INITIAL_FOUR_EA_LOAD_OUT
00001492  6100 11FE                513          bsr             NEWLINE                 Newline
00001496  6000 FDE8                514          bra             MAIN_LOOP
0000149A                           515  
0000149A                           516  
0000149A                           517  * Mnemonic: move.w
0000149A                           518  MC_MOVE_W_MOVEA_W
0000149A  6100 1DEC                519          bsr             SIZE_WORD
0000149E  6100 149A                520          bsr             INITIAL_FOUR_EA_LOAD
000014A2  6100 1582                521          bsr             ADDRESS_READ_DECISION_LOAD
000014A6  6100 1C7C                522          bsr             IS_VALID
000014AA  6100 11F4                523          bsr             TAB
000014AE                           524  
000014AE                           525  MMLMW_MOVEA_OUT
000014AE  0C39 0001 000032B5       526          cmp.b           #1,DEST_MODE
000014B6  6600 000A                527          bne             MMLMW_MOVE_OUT
000014BA  6100 0E8E                528          bsr             MOVEA_S
000014BE  6000 0006                529          bra             MMLMW_MOVE_OPERAND
000014C2                           530  MMLMW_MOVE_OUT
000014C2  6100 0E78                531          bsr             MOVE_S
000014C6                           532  MMLMW_MOVE_OPERAND
000014C6  6100 0D66                533          bsr             SIZE_TAG_S
000014CA  6100 11D4                534          bsr             TAB
000014CE  6100 1B9A                535          bsr             INITIAL_FOUR_EA_LOAD_OUT
000014D2  6100 11BE                536          bsr             NEWLINE                 Newline
000014D6  6000 FDA8                537          bra             MAIN_LOOP        
000014DA                           538  
000014DA                           539  * Mnemonic: clr, nop, rts, jsr, movem, lea
000014DA                           540  MC_CLR_LEA
000014DA                           541  MCL_NOP
000014DA                           542          * Check for 'NOP' instruction.
000014DA  0C79 4E71 000032C2       543          cmp.w           #$4e71,INITIAL_INSTRUCTION
000014E2  6600 0012                544          bne             MCL_RTS
000014E6  6100 11B8                545          bsr             TAB
000014EA  6100 0E7A                546          bsr             NOP_S
000014EE  6100 11A2                547          bsr             NEWLINE
000014F2  6000 FD8C                548          bra             MAIN_LOOP
000014F6                           549  MCL_RTS
000014F6                           550          * Check 'RTS' instruction.
000014F6  0C79 4E75 000032C2       551          cmp.w           #$4e75,INITIAL_INSTRUCTION
000014FE  6600 0012                552          bne             MCL_CLR
00001502  6100 119C                553          bsr             TAB
00001506  6100 0E6C                554          bsr             RTS_S
0000150A  6100 1186                555          bsr             NEWLINE
0000150E  6000 FD70                556          bra             MAIN_LOOP
00001512                           557  MCL_CLR
00001512                           558          * Check 'CLR' instruction
00001512  0C39 0042 000032C2       559          cmp.b           #$42,INITIAL_INSTRUCTION
0000151A  6600 002E                560          bne             MCL_JSR
0000151E  6100 145A                561          bsr             INITIAL_TWO_EA_LOAD_SIZE
00001522  6100 1CBE                562          bsr             SIZE_CONVERT_TYPE_ONE
00001526  6100 14FE                563          bsr             ADDRESS_READ_DECISION_LOAD
0000152A  6100 1BF8                564          bsr             IS_VALID
0000152E  6100 1170                565          bsr             TAB
00001532  6100 0E24                566          bsr             CLR_S
00001536  6100 0CF6                567          bsr             SIZE_TAG_S
0000153A  6100 1164                568          bsr             TAB
0000153E                           569  
0000153E  6100 166C                570          bsr             INITIAL_TWO_EA_LOAD_OUT
00001542  6100 114E                571          bsr             NEWLINE
00001546  6000 FD38                572          bra             MAIN_LOOP
0000154A                           573          ** todo: work here
0000154A                           574  MCL_JSR
0000154A                           575          * Check 'JSR' instruction
0000154A  0C39 004E 000032C2       576          cmp.b           #$4e,INITIAL_INSTRUCTION
00001552  6600 0032                577          bne             MCL_LEA
00001556  6100 1422                578          bsr             INITIAL_TWO_EA_LOAD_SIZE
0000155A  0C39 0002 000032C0       579          cmp.b           #2,SIZE
00001562  6600 0C9A                580          bne             INVALID_S
00001566                           581  
00001566  6100 14BE                582          bsr             ADDRESS_READ_DECISION_LOAD
0000156A  6100 1BB8                583          bsr             IS_VALID
0000156E                           584  
0000156E  6100 1130                585          bsr             TAB
00001572  6100 0E0E                586          bsr             JSR_S
00001576                           587  
00001576  6100 1128                588          bsr             TAB
0000157A  6100 1630                589          bsr             INITIAL_TWO_EA_LOAD_OUT
0000157E                           590  
0000157E  6100 1112                591          bsr             NEWLINE
00001582                           592  
00001582  6000 FCFC                593          bra             MAIN_LOOP
00001586                           594  MCL_LEA
00001586                           595          * Check 'lea' instruction
00001586  6100 13B2                596          bsr             INITIAL_FOUR_EA_LOAD
0000158A  0C39 0007 000032B5       597          cmp.b           #7,DEST_MODE
00001592  6600 002E                598          bne             MCL_MOVEM
00001596  6100 1CFA                599          bsr             SIZE_LONG
0000159A  13FC 0001 000032B5       600          move.b          #1,DEST_MODE
000015A2  6100 1482                601          bsr             ADDRESS_READ_DECISION_LOAD
000015A6  6100 1B7C                602          bsr             IS_VALID
000015AA                           603          
000015AA  6100 10F4                604          bsr             TAB
000015AE  6100 0DEE                605          bsr             LEA_S
000015B2  6100 10EC                606          bsr             TAB
000015B6                           607  
000015B6  6100 1AB2                608          bsr             INITIAL_FOUR_EA_LOAD_OUT
000015BA                           609  
000015BA  6100 10D6                610          bsr             NEWLINE
000015BE  6000 FCC0                611          bra             MAIN_LOOP
000015C2                           612  
000015C2                           613  MCL_MOVEM
000015C2                           614          * Check whether it correct movem or not
000015C2  3E39 000032C2            615          move.w          INITIAL_INSTRUCTION,d7
000015C8  0807 000B                616          btst            #11,d7
000015CC  6700 032A                617          beq             MCL_INVALID
000015D0  0807 0009                618          btst            #9,d7
000015D4  6600 0322                619          bne             MCL_INVALID
000015D8  0807 0008                620          btst            #8,d7
000015DC  6600 031A                621          bne             MCL_INVALID
000015E0  0807 0007                622          btst            #7,d7
000015E4  6700 0312                623          beq             MCL_INVALID
000015E8                           624  
000015E8                           625          * Now its valid instruction
000015E8                           626          ** load and checking Register list mask
000015E8  6100 0042                627          bsr             MCL_MM_LOAD_REGISTER_MASK       * Register List load
000015EC  6100 13B6                628          bsr             INITIAL_TWO_EA_LOAD             * mode and register load
000015F0  6100 1434                629          bsr             ADDRESS_READ_DECISION_LOAD
000015F4  6100 1B2E                630          bsr             IS_VALID
000015F8                           631  
000015F8                           632          * Settign the size of the instruction.
000015F8                           633  MCL_MM_WORD
000015F8  0807 0006                634          btst            #6,d7
000015FC  6600 000A                635          bne             MCL_MM_LONG
00001600  6100 1C86                636          bsr             SIZE_WORD
00001604  6000 000A                637          bra             MCL_MM_OUT
00001608                           638  MCL_MM_LONG
00001608  6100 1C88                639          bsr             SIZE_LONG
0000160C  6000 0002                640          bra             MCL_MM_OUT
00001610                           641  MCL_MM_OUT
00001610  6100 108E                642          bsr             TAB
00001614  6100 0D7A                643          bsr             MOVEM_S
00001618  6100 0C14                644          bsr             SIZE_TAG_S
0000161C  6100 1082                645          bsr             TAB
00001620                           646  
00001620  6100 001E                647          bsr             MCL_MM_OPERAND
00001624  6100 106C                648          bsr             NEWLINE
00001628                           649  
00001628  6000 FC56                650          bra             MAIN_LOOP
0000162C                           651          
0000162C                           652  
0000162C                           653  MCL_MM_LOAD_REGISTER_MASK
0000162C                           654          ** Load register list mask
0000162C  33DE 000032B0            655          move.w          (a6)+,REGISTER_LIST_MASK
00001632  0C79 0000 000032B0       656          cmp.w           #0,REGISTER_LIST_MASK
0000163A  6700 02BC                657          beq             MCL_INVALID
0000163E  4E75                     658          rts
00001640                           659  
00001640                           660  
00001640                           661  MCL_MM_OPERAND
00001640  4245                     662          clr.w           d5                      * boolean register, saving more than one or not?
00001642  4244                     663          clr.w           d4                      * Instructoin order
00001644                           664          
00001644                           665          * Validatoin check for REGISTER_LIST_MASK
00001644  0C79 0000 000032B0       666          cmp.w           #0,REGISTER_LIST_MASK
0000164C  6700 0BB0                667          beq             INVALID_S
00001650                           668  
00001650  3839 000032B0            669          move.w          REGISTER_LIST_MASK,d4
00001656  0807 000A                670          btst            #10,d7
0000165A  6600 0148                671          bne             MCL_MM_ORD_MEM_REG
0000165E                           672  MCL_MM_ORD_REG_MEM
0000165E                           673          * -------------------------------
0000165E                           674          * Printing List
0000165E                           675  MCL_MM_ORD_REG_MEM_D0
0000165E  0804 000F                676          btst            #15,d4
00001662  6700 000A                677          beq             MCL_MM_ORD_REG_MEM_D1
00001666  6100 0E86                678          bsr             D_ZERO_S
0000166A  1A3C 0001                679          move.b          #1,d5
0000166E                           680  MCL_MM_ORD_REG_MEM_D1
0000166E  0804 000E                681          btst            #14,d4
00001672  6700 000E                682          beq             MCL_MM_ORD_REG_MEM_D2
00001676  6100 0272                683          bsr             MCL_MM_ORD_SLASH
0000167A  6100 0E80                684          bsr             D_ONE_S
0000167E  1A3C 0001                685          move.b          #1,d5
00001682                           686  MCL_MM_ORD_REG_MEM_D2
00001682  0804 000D                687          btst            #13,d4
00001686  6700 000E                688          beq             MCL_MM_ORD_REG_MEM_D3
0000168A  6100 025E                689          bsr             MCL_MM_ORD_SLASH
0000168E  6100 0E7A                690          bsr             D_TWO_S
00001692  1A3C 0001                691          move.b          #1,d5
00001696                           692  MCL_MM_ORD_REG_MEM_D3
00001696  0804 000C                693          btst            #12,d4
0000169A  6700 000E                694          beq             MCL_MM_ORD_REG_MEM_D4
0000169E  6100 024A                695          bsr             MCL_MM_ORD_SLASH
000016A2  6100 0E74                696          bsr             D_THREE_S
000016A6  1A3C 0001                697          move.b          #1,d5
000016AA                           698  MCL_MM_ORD_REG_MEM_D4
000016AA  0804 000B                699          btst            #11,d4
000016AE  6700 000E                700          beq             MCL_MM_ORD_REG_MEM_D5
000016B2  6100 0236                701          bsr             MCL_MM_ORD_SLASH
000016B6  6100 0E6E                702          bsr             D_FOUR_S
000016BA  1A3C 0001                703          move.b          #1,d5
000016BE                           704  MCL_MM_ORD_REG_MEM_D5
000016BE  0804 000A                705          btst            #10,d4
000016C2  6700 000E                706          beq             MCL_MM_ORD_REG_MEM_D6
000016C6  6100 0222                707          bsr             MCL_MM_ORD_SLASH
000016CA  6100 0E68                708          bsr             D_FIVE_S
000016CE  1A3C 0001                709          move.b          #1,d5
000016D2                           710  MCL_MM_ORD_REG_MEM_D6
000016D2  0804 0009                711          btst            #9,d4
000016D6  6700 000E                712          beq             MCL_MM_ORD_REG_MEM_D7
000016DA  6100 020E                713          bsr             MCL_MM_ORD_SLASH
000016DE  6100 0E62                714          bsr             D_SIX_S
000016E2  1A3C 0001                715          move.b          #1,d5
000016E6                           716  MCL_MM_ORD_REG_MEM_D7
000016E6  0804 0008                717          btst            #8,d4
000016EA  6700 000E                718          beq             MCL_MM_ORD_REG_MEM_A0
000016EE  6100 01FA                719          bsr             MCL_MM_ORD_SLASH
000016F2  6100 0E5C                720          bsr             D_SEVEN_S
000016F6  1A3C 0001                721          move.b          #1,d5
000016FA                           722  MCL_MM_ORD_REG_MEM_A0
000016FA  0804 0007                723          btst            #7,d4
000016FE  6700 000E                724          beq             MCL_MM_ORD_REG_MEM_A1
00001702  6100 01E6                725          bsr             MCL_MM_ORD_SLASH
00001706  6100 0E56                726          bsr             A_ZERO_S
0000170A  1A3C 0001                727          move.b          #1,d5
0000170E                           728  MCL_MM_ORD_REG_MEM_A1
0000170E  0804 0006                729          btst            #6,d4
00001712  6700 000E                730          beq             MCL_MM_ORD_REG_MEM_A2
00001716  6100 01D2                731          bsr             MCL_MM_ORD_SLASH
0000171A  6100 0E50                732          bsr             A_ONE_S
0000171E  1A3C 0001                733          move.b          #1,d5
00001722                           734  MCL_MM_ORD_REG_MEM_A2
00001722  0804 0005                735          btst            #5,d4
00001726  6700 000E                736          beq             MCL_MM_ORD_REG_MEM_A3
0000172A  6100 01BE                737          bsr             MCL_MM_ORD_SLASH
0000172E  6100 0E4A                738          bsr             A_TWO_S
00001732  1A3C 0001                739          move.b          #1,d5
00001736                           740  MCL_MM_ORD_REG_MEM_A3
00001736  0804 0004                741          btst            #4,d4
0000173A  6700 000E                742          beq             MCL_MM_ORD_REG_MEM_A4
0000173E  6100 01AA                743          bsr             MCL_MM_ORD_SLASH
00001742  6100 0E44                744          bsr             A_THREE_S
00001746  1A3C 0001                745          move.b          #1,d5
0000174A                           746  MCL_MM_ORD_REG_MEM_A4
0000174A  0804 0003                747          btst            #3,d4
0000174E  6700 000E                748          beq             MCL_MM_ORD_REG_MEM_A5
00001752  6100 0196                749          bsr             MCL_MM_ORD_SLASH
00001756  6100 0E3E                750          bsr             A_FOUR_S
0000175A  1A3C 0001                751          move.b          #1,d5
0000175E                           752  MCL_MM_ORD_REG_MEM_A5
0000175E  0804 0002                753          btst            #2,d4
00001762  6700 000E                754          beq             MCL_MM_ORD_REG_MEM_A6
00001766  6100 0182                755          bsr             MCL_MM_ORD_SLASH
0000176A  6100 0E38                756          bsr             A_FIVE_S
0000176E  1A3C 0001                757          move.b          #1,d5
00001772                           758  MCL_MM_ORD_REG_MEM_A6
00001772  0804 0001                759          btst            #1,d4
00001776  6700 000E                760          beq             MCL_MM_ORD_REG_MEM_A7
0000177A  6100 016E                761          bsr             MCL_MM_ORD_SLASH
0000177E  6100 0E32                762          bsr             A_SIX_S
00001782  1A3C 0001                763          move.b          #1,d5
00001786                           764  MCL_MM_ORD_REG_MEM_A7
00001786  0804 0000                765          btst            #0,d4
0000178A  6700 000E                766          beq             MCL_MM_ORD_REG_MEM_LAST
0000178E  6100 015A                767          bsr             MCL_MM_ORD_SLASH
00001792  6100 0E2C                768          bsr             A_SEVEN_S
00001796  1A3C 0001                769          move.b          #1,d5
0000179A                           770          * -------------------------------
0000179A                           771  MCL_MM_ORD_REG_MEM_LAST
0000179A  6100 0EDA                772          bsr             COMMA_S
0000179E  6100 140C                773          bsr             INITIAL_TWO_EA_LOAD_OUT
000017A2                           774  
000017A2  4E75                     775          rts
000017A4                           776  
000017A4                           777          
000017A4                           778  MCL_MM_ORD_MEM_REG
000017A4  6100 1406                779          bsr             INITIAL_TWO_EA_LOAD_OUT
000017A8  6100 0ECC                780          bsr             COMMA_S
000017AC                           781          * -------------------------------
000017AC                           782          * Printing List
000017AC                           783  MCL_MM_ORD_MEM_REG_D0
000017AC  0804 0000                784          btst            #0,d4
000017B0  6700 000A                785          beq             MCL_MM_ORD_MEM_REG_D1
000017B4  6100 0D38                786          bsr             D_ZERO_S
000017B8  1A3C 0001                787          move.b          #1,d5
000017BC                           788  MCL_MM_ORD_MEM_REG_D1
000017BC  0804 0001                789          btst            #1,d4
000017C0  6700 000E                790          beq             MCL_MM_ORD_MEM_REG_D2
000017C4  6100 0124                791          bsr             MCL_MM_ORD_SLASH
000017C8  6100 0D32                792          bsr             D_ONE_S
000017CC  1A3C 0001                793          move.b          #1,d5
000017D0                           794  MCL_MM_ORD_MEM_REG_D2
000017D0  0804 0002                795          btst            #2,d4
000017D4  6700 000E                796          beq             MCL_MM_ORD_MEM_REG_D3
000017D8  6100 0110                797          bsr             MCL_MM_ORD_SLASH
000017DC  6100 0D2C                798          bsr             D_TWO_S
000017E0  1A3C 0001                799          move.b          #1,d5
000017E4                           800  MCL_MM_ORD_MEM_REG_D3
000017E4  0804 0003                801          btst            #3,d4
000017E8  6700 000E                802          beq             MCL_MM_ORD_MEM_REG_D4
000017EC  6100 00FC                803          bsr             MCL_MM_ORD_SLASH
000017F0  6100 0D26                804          bsr             D_THREE_S
000017F4  1A3C 0001                805          move.b          #1,d5
000017F8                           806  MCL_MM_ORD_MEM_REG_D4
000017F8  0804 0004                807          btst            #4,d4
000017FC  6700 000E                808          beq             MCL_MM_ORD_MEM_REG_D5
00001800  6100 00E8                809          bsr             MCL_MM_ORD_SLASH
00001804  6100 0D20                810          bsr             D_FOUR_S
00001808  1A3C 0001                811          move.b          #1,d5
0000180C                           812  MCL_MM_ORD_MEM_REG_D5
0000180C  0804 0005                813          btst            #5,d4
00001810  6700 000E                814          beq             MCL_MM_ORD_MEM_REG_D6
00001814  6100 00D4                815          bsr             MCL_MM_ORD_SLASH
00001818  6100 0D1A                816          bsr             D_FIVE_S
0000181C  1A3C 0001                817          move.b          #1,d5
00001820                           818  MCL_MM_ORD_MEM_REG_D6
00001820  0804 0006                819          btst            #6,d4
00001824  6700 000E                820          beq             MCL_MM_ORD_MEM_REG_D7
00001828  6100 00C0                821          bsr             MCL_MM_ORD_SLASH
0000182C  6100 0D14                822          bsr             D_SIX_S
00001830  1A3C 0001                823          move.b          #1,d5
00001834                           824  MCL_MM_ORD_MEM_REG_D7
00001834  0804 0007                825          btst            #7,d4
00001838  6700 000E                826          beq             MCL_MM_ORD_MEM_REG_A0
0000183C  6100 00AC                827          bsr             MCL_MM_ORD_SLASH
00001840  6100 0D0E                828          bsr             D_SEVEN_S
00001844  1A3C 0001                829          move.b          #1,d5
00001848                           830  MCL_MM_ORD_MEM_REG_A0
00001848  0804 0008                831          btst            #8,d4
0000184C  6700 000E                832          beq             MCL_MM_ORD_MEM_REG_A1
00001850  6100 0098                833          bsr             MCL_MM_ORD_SLASH
00001854  6100 0D08                834          bsr             A_ZERO_S
00001858  1A3C 0001                835          move.b          #1,d5
0000185C                           836  MCL_MM_ORD_MEM_REG_A1
0000185C  0804 0009                837          btst            #9,d4
00001860  6700 000E                838          beq             MCL_MM_ORD_MEM_REG_A2
00001864  6100 0084                839          bsr             MCL_MM_ORD_SLASH
00001868  6100 0D02                840          bsr             A_ONE_S
0000186C  1A3C 0001                841          move.b          #1,d5
00001870                           842  MCL_MM_ORD_MEM_REG_A2
00001870  0804 000A                843          btst            #10,d4
00001874  6700 000E                844          beq             MCL_MM_ORD_MEM_REG_A3
00001878  6100 0070                845          bsr             MCL_MM_ORD_SLASH
0000187C  6100 0CFC                846          bsr             A_TWO_S
00001880  1A3C 0001                847          move.b          #1,d5
00001884                           848  MCL_MM_ORD_MEM_REG_A3
00001884  0804 000B                849          btst            #11,d4
00001888  6700 000E                850          beq             MCL_MM_ORD_MEM_REG_A4
0000188C  6100 005C                851          bsr             MCL_MM_ORD_SLASH
00001890  6100 0CF6                852          bsr             A_THREE_S
00001894  1A3C 0001                853          move.b          #1,d5
00001898                           854  MCL_MM_ORD_MEM_REG_A4
00001898  0804 000C                855          btst            #12,d4
0000189C  6700 000E                856          beq             MCL_MM_ORD_MEM_REG_A5
000018A0  6100 0048                857          bsr             MCL_MM_ORD_SLASH
000018A4  6100 0CF0                858          bsr             A_FOUR_S
000018A8  1A3C 0001                859          move.b          #1,d5
000018AC                           860  MCL_MM_ORD_MEM_REG_A5
000018AC  0804 000D                861          btst            #13,d4
000018B0  6700 000E                862          beq             MCL_MM_ORD_MEM_REG_A6
000018B4  6100 0034                863          bsr             MCL_MM_ORD_SLASH
000018B8  6100 0CEA                864          bsr             A_FIVE_S
000018BC  1A3C 0001                865          move.b          #1,d5
000018C0                           866  MCL_MM_ORD_MEM_REG_A6
000018C0  0804 000E                867          btst            #14,d4
000018C4  6700 000E                868          beq             MCL_MM_ORD_MEM_REG_A7
000018C8  6100 0020                869          bsr             MCL_MM_ORD_SLASH
000018CC  6100 0CE4                870          bsr             A_SIX_S
000018D0  1A3C 0001                871          move.b          #1,d5
000018D4                           872  MCL_MM_ORD_MEM_REG_A7
000018D4  0804 000F                873          btst            #15,d4
000018D8  6700 000E                874          beq             MCL_MM_ORD_MEM_REG_LAST
000018DC  6100 000C                875          bsr             MCL_MM_ORD_SLASH
000018E0  6100 0CDE                876          bsr             A_SEVEN_S
000018E4  1A3C 0001                877          move.b          #1,d5
000018E8                           878  MCL_MM_ORD_MEM_REG_LAST
000018E8  4E75                     879          rts
000018EA                           880          * -------------------------------
000018EA                           881  
000018EA                           882  MCL_MM_ORD_SLASH
000018EA  BA7C 0001                883          cmp.w           #1,d5
000018EE  6600 0006                884          bne             MCL_MM_ORD_SLASH_NOT
000018F2  6100 0D90                885          bsr             SLASH_S   
000018F6                           886  MCL_MM_ORD_SLASH_NOT
000018F6  4E75                     887          rts
000018F8                           888  
000018F8                           889  MCL_INVALID
000018F8  6100 10FA                890          bsr             CLEAR_ALL_BIT_S
000018FC  6000 0900                891          bra             INVALID_S
00001900                           892  
00001900                           893          * Check 'movem' instruction
00001900                           894          * Show error
00001900                           895  
00001900                           896  * Mnemonic: addq
00001900                           897  MC_ADDQ
00001900                           898          * Valid check (Check whether 8th bit is one or not, '1' is invalid)
00001900  4247                     899          clr.w          d7
00001902  1E39 000032C2            900          move.b          INITIAL_INSTRUCTION,D7
00001908  0807 0008                901          btst            #8,d7
0000190C  6600 008E                902          bne             MCAQ_INVALID
00001910                           903          * InInitiating EA_MODE, EA_Register, SIZE
00001910  6100 1068                904          bsr             INITIAL_TWO_EA_LOAD_SIZE
00001914  6100 18CC                905          bsr             SIZE_CONVERT_TYPE_ONE           * Converting size instruction.
00001918  6100 110C                906          bsr             ADDRESS_READ_DECISION_LOAD      * Check for memory load
0000191C  6100 1806                907          BSR             IS_VALID                        * Validation check
00001920                           908          
00001920                           909          * Load 'Data' into 'DEST_REGISTER variable' - DEST_MODE get garbage.
00001920  6100 1018                910          bsr             INITIAL_FOUR_EA_LOAD
00001924                           911  
00001924                           912          * Save data into register, and if 'DATA' is #0, change it into '8'
00001924  4247                     913          clr             d7
00001926  1E39 000032B4            914          move.b          DEST_REGISTER,d7
0000192C  BE3C 0008                915          cmp.b           #8,d7
00001930  6700 0006                916          beq             MC_ADDQ_FINAL
00001934  1E3C 0008                917          move.b          #8,d7
00001938                           918  
00001938                           919  MC_ADDQ_FINAL
00001938                           920          * Check whether the destination <ea> or not, and if the destination is ea, set DEST_NUMBER_DATA.
00001938  0C39 0007 000032B6       921          cmp.b           #7,SRC_MODE
00001940  6600 000C                922          bne             MC_ADDQ_FINAL_DONE
00001944  23F9 000032B8 000032BC   923          move.l          SRC_NUMBER_DATA,DST_NUMBER_DATA
0000194E                           924  MC_ADDQ_FINAL_DONE       
0000194E                           925          *deceiving assembler
0000194E  33C7 000032B8            926          move.w          d7,SRC_NUMBER_DATA
00001954  13F9 000032B6 000032B5   927          move.b          SRC_MODE,DEST_MODE
0000195E  13F9 000032B7 000032B4   928          move.b          SRC_REGISTER,DEST_REGISTER
00001968  13FC 0007 000032B6       929          move.b          #7,SRC_MODE
00001970  13FC 0004 000032B7       930          move.b          #4,SRC_REGISTER
00001978  6100 17AA                931          bsr             IS_VALID
0000197C                           932  
0000197C  6100 0D22                933          bsr             TAB
00001980  6100 0A2A                934          bsr             ADDQ_S
00001984  6100 08A8                935          bsr             SIZE_TAG_S
00001988  6100 0D16                936          bsr             TAB
0000198C  6100 18F0                937          bsr             SIZE_BYTE
00001990  6100 16D8                938          bsr             INITIAL_FOUR_EA_LOAD_OUT
00001994  6100 0CFC                939          bsr             NEWLINE                 Newline
00001998                           940  
00001998  6000 F8E6                941          bra             MAIN_LOOP
0000199C                           942  MCAQ_INVALID
0000199C  6000 0860                943          bra             INVALID_S
000019A0                           944  
000019A0                           945  * Mnemonic: bcc, bgt, ble
000019A0                           946  MC_BCGL
000019A0  48E7 0300                947          movem.l         d6/d7,-(sp)
000019A4  2C0E                     948          move.l          a6,d6
000019A6  0C39 0064 000032C2       949          cmp.b           #$64,INITIAL_INSTRUCTION
000019AE  6700 001E                950          beq             MCBL_BCC
000019B2  0C39 006E 000032C2       951          cmp.b           #$6E,INITIAL_INSTRUCTION
000019BA  6700 0026                952          beq             MCBL_BGT
000019BE  0C39 006F 000032C2       953          cmp.b           #$6F,INITIAL_INSTRUCTION
000019C6  6700 002E                954          beq             MCBL_BLE
000019CA                           955  
000019CA  6000 010E                956          bra             MCBC_INVALID
000019CE                           957  MCBL_BCC
000019CE  6100 100E                958          bsr             INITIAL_DATA_EIGHT_LOAD
000019D2  6100 11AE                959          bsr             CONDIITON_DECISION_LOAD
000019D6  6100 0CC8                960          bsr             TAB
000019DA  6100 09DE                961          bsr             BCC_S
000019DE  6000 002A                962          bra             MC_BCGL_FINAL
000019E2                           963  MCBL_BGT
000019E2  6100 0FFA                964          bsr             INITIAL_DATA_EIGHT_LOAD
000019E6  6100 119A                965          bsr             CONDIITON_DECISION_LOAD
000019EA  6100 0CB4                966          bsr             TAB
000019EE  6100 09D8                967          bsr             BGT_S
000019F2  6000 0016                968          bra             MC_BCGL_FINAL
000019F6                           969  MCBL_BLE
000019F6  6100 0FE6                970          bsr             INITIAL_DATA_EIGHT_LOAD
000019FA  6100 1186                971          bsr             CONDIITON_DECISION_LOAD
000019FE  6100 0CA0                972          bsr             TAB
00001A02  6100 09D2                973          bsr             BLE_S
00001A06  6000 0002                974          bra             MC_BCGL_FINAL
00001A0A                           975  
00001A0A                           976  MC_BCGL_FINAL
00001A0A  4247                     977          clr.w           d7
00001A0C                           978  
00001A0C  0C39 0000 000032B3       979          cmp.b           #$00,DATA_EIGHT_BIT
00001A14  6700 004E                980          beq             MC_BCGL_FINAL_16
00001A18  0C39 00FF 000032B3       981          cmp.b           #$FF,DATA_EIGHT_BIT
00001A20  6700 0082                982          beq             MC_BCGL_FINAL_32
00001A24                           983          
00001A24  1E39 000032B3            984          move.b          DATA_EIGHT_BIT,d7
00001A2A  4285                     985          clr.l           d5
00001A2C  1A3C 0018                986          move.b          #24,d5
00001A30  EBA7                     987          asl.l           d5,d7
00001A32  EAA7                     988          asr.l           d5,d7
00001A34                           989  
00001A34  23C7 000032B8            990          move.l          d7,SRC_NUMBER_DATA
00001A3A  DDB9 000032B8            991          add.l           d6,SRC_NUMBER_DATA
00001A40                           992  
00001A40                           993          * Deceiving Assembler
00001A40  6100 183C                994          bsr             SIZE_BYTE
00001A44  6100 07E8                995          bsr             SIZE_TAG_S
00001A48  6100 0C56                996          bsr             TAB
00001A4C  13FC 0007 000032B6       997          move.b          #7,SRC_MODE
00001A54  13FC 0001 000032B7       998          move.b          #1,SRC_REGISTER
00001A5C                           999  
00001A5C  6100 114E               1000          bsr             INITIAL_TWO_EA_LOAD_OUT
00001A60                          1001  
00001A60  6000 006C               1002          bra             MC_BCGL_FINAL_LAST
00001A64                          1003          
00001A64                          1004  MC_BCGL_FINAL_16
00001A64                          1005          * 16 bit displacement
00001A64                          1006          ** Deceiving Assembler
00001A64  6100 1822               1007          bsr             SIZE_WORD
00001A68  6100 07C4               1008          bsr             SIZE_TAG_S
00001A6C  6100 0C32               1009          bsr             TAB
00001A70  13FC 0007 000032B6      1010          move.b          #7,SRC_MODE
00001A78  13FC 0001 000032B7      1011          move.b          #1,SRC_REGISTER
00001A80                          1012  
00001A80  3E39 000032B8           1013          move.w          SRC_NUMBER_DATA,d7
00001A86  4285                    1014          clr.l           d5
00001A88  1A3C 0010               1015          move.b          #16,d5
00001A8C  EBA7                    1016          asl.l           d5,d7
00001A8E  EAA7                    1017          asr.l           d5,d7
00001A90  23C7 000032B8           1018          move.l          d7,SRC_NUMBER_DATA
00001A96                          1019  
00001A96  DDB9 000032B8           1020          add.l           d6,SRC_NUMBER_DATA
00001A9C  6100 110E               1021          bsr             INITIAL_TWO_EA_LOAD_OUT
00001AA0                          1022  
00001AA0  6000 002C               1023          bra             MC_BCGL_FINAL_LAST
00001AA4                          1024  MC_BCGL_FINAL_32
00001AA4                          1025          * 32 bit displacement
00001AA4                          1026          ** Deceiving Assembler
00001AA4  6100 17EC               1027          bsr             SIZE_LONG
00001AA8  6100 0784               1028          bsr             SIZE_TAG_S
00001AAC  6100 0BF2               1029          bsr             TAB
00001AB0  13FC 0007 000032B6      1030          move.b          #7,SRC_MODE
00001AB8  13FC 0001 000032B7      1031          move.b          #1,SRC_REGISTER
00001AC0  DDB9 000032B8           1032          add.l           d6,SRC_NUMBER_DATA
00001AC6  6100 10E4               1033          bsr             INITIAL_TWO_EA_LOAD_OUT
00001ACA                          1034  
00001ACA  6000 0002               1035          bra             MC_BCGL_FINAL_LAST
00001ACE                          1036  MC_BCGL_FINAL_LAST
00001ACE  4CDF 00C0               1037          movem.l         (sp)+,d6-d7
00001AD2  6100 0BBE               1038          bsr             NEWLINE
00001AD6  6000 F7A8               1039          bra             MAIN_LOOP
00001ADA                          1040  MCBC_INVALID
00001ADA  4CDF 00C0               1041          movem.l         (sp)+,d6-d7
00001ADE  6000 071E               1042          bra             INVALID_S
00001AE2                          1043  
00001AE2                          1044  * Mnemonic: moveq
00001AE2                          1045  MC_MOVEQ
00001AE2  3E39 000032C2           1046          move.w          INITIAL_INSTRUCTION,d7
00001AE8  0807 0008               1047          btst            #8,d7
00001AEC  6600 0050               1048          bne             MCMQ_INVALID
00001AF0                          1049  
00001AF0                          1050          * The instruction is valid
00001AF0  6100 0EEC               1051          bsr             INITIAL_DATA_EIGHT_LOAD
00001AF4  6100 0E44               1052          bsr             INITIAL_FOUR_EA_LOAD
00001AF8                          1053  
00001AF8                          1054          * Deceiving Assembler
00001AF8  13FC 0000 000032B5      1055          move.b          #0,DEST_MODE
00001B00  13FC 0007 000032B6      1056          move.b          #7,SRC_MODE
00001B08  13FC 0004 000032B7      1057          move.b          #4,SRC_REGISTER
00001B10  4246                    1058          clr.w           d6
00001B12  1C39 000032B3           1059          move.b          DATA_EIGHT_BIT,d6
00001B18  33C6 000032B8           1060          move.w          d6,SRC_NUMBER_DATA
00001B1E  6100 175E               1061          bsr             SIZE_BYTE
00001B22  6100 0B7C               1062          bsr             TAB
00001B26                          1063          
00001B26  6100 08BC               1064          bsr             MOVEQ_S
00001B2A  6100 0B74               1065          bsr             TAB
00001B2E  6100 153A               1066          bsr             INITIAL_FOUR_EA_LOAD_OUT
00001B32  6100 0B5E               1067          bsr             NEWLINE                 Newline
00001B36  6000 0002               1068          bra             MC_MOVEQ_FINAL
00001B3A                          1069  MC_MOVEQ_FINAL
00001B3A  6000 F744               1070          bra             MAIN_LOOP
00001B3E                          1071  MCMQ_INVALID
00001B3E  6000 06BE               1072          bra             INVALID_S
00001B42                          1073  
00001B42                          1074  * Mnemonic: or, divu
00001B42                          1075  MC_OR_DIVU
00001B42  6100 0DF6               1076          bsr             INITIAL_FOUR_EA_LOAD
00001B46                          1077  MCOD_DIVU
00001B46                          1078          * Check for DIVU instruction
00001B46  0C39 0003 000032B5      1079          cmp.b           #3,DEST_MODE
00001B4E  6600 0032               1080          bne             MCOD_OR
00001B52  6100 1734               1081          bsr             SIZE_WORD
00001B56  13FC 0000 000032B5      1082          move.b          #$00,DEST_MODE
00001B5E  6100 0EC6               1083          bsr             ADDRESS_READ_DECISION_LOAD
00001B62  6100 15C0               1084          bsr             IS_VALID
00001B66                          1085  
00001B66  6100 0B38               1086          bsr             TAB
00001B6A  6100 0894               1087          bsr             DIVU_S
00001B6E  6100 06BE               1088          bsr             SIZE_TAG_S
00001B72                          1089  
00001B72  6100 0B2C               1090          bsr             TAB
00001B76  6100 14F2               1091          bsr             INITIAL_FOUR_EA_LOAD_OUT
00001B7A                          1092  
00001B7A  6100 0B16               1093          bsr             NEWLINE
00001B7E  6000 F700               1094          bra             MAIN_LOOP
00001B82                          1095  
00001B82                          1096  MCOD_OR
00001B82                          1097          * OR valid case
00001B82  0C39 0007 000032B5      1098          cmp.b           #7,DEST_MODE
00001B8A  6700 0080               1099          beq             MCOD_INVALID
00001B8E                          1100  
00001B8E                          1101          * Invalid common operation
00001B8E                          1102          ** Setting the size
00001B8E  13F9 000032B5 000032C0  1103          move.b          DEST_MODE,SIZE
00001B98  6100 1684               1104          bsr             SIZE_CONVERT_TYPE_TWO
00001B9C                          1105  
00001B9C                          1106          * This is valid OR so printout OR.
00001B9C  6100 0B02               1107          bsr             TAB
00001BA0  6100 0850               1108          bsr             OR_S
00001BA4  6100 0688               1109          bsr             SIZE_TAG_S
00001BA8                          1110  MCOD_OR_DN
00001BA8                          1111          * Check for OR instruction <ea> V Dn -> Dn format
00001BA8  0C39 0004 000032B5      1112          cmp.b           #4,DEST_MODE
00001BB0  6400 001E               1113          bcc             MCOD_OR_EA
00001BB4                          1114  
00001BB4                          1115          * Set dest mode as register (Deception!!)
00001BB4  13FC 0000 000032B5      1116          move.b          #$00,DEST_MODE
00001BBC                          1117  
00001BBC                          1118          * Based on deception, load memory
00001BBC  6100 0E68               1119          bsr             ADDRESS_READ_DECISION_LOAD
00001BC0                          1120  
00001BC0                          1121          * Print out
00001BC0  6100 0ADE               1122          bsr             TAB
00001BC4  6100 14A4               1123          bsr             INITIAL_FOUR_EA_LOAD_OUT
00001BC8                          1124  
00001BC8  6100 0AC8               1125          bsr             NEWLINE
00001BCC  6000 F6B2               1126          bra             MAIN_LOOP
00001BD0                          1127  MCOD_OR_EA
00001BD0                          1128          * OR instruction and Dn V <ea> -> <ea> format
00001BD0                          1129  
00001BD0                          1130          * back up the Dest_register
00001BD0  1E39 000032B4           1131          move.b          DEST_REGISTER,d7
00001BD6  13F9 000032B6 000032B5  1132          move.b          SRC_MODE,DEST_MODE
00001BE0  13F9 000032B7 000032B4  1133          move.b          SRC_REGISTER,DEST_REGISTER
00001BEA                          1134  
00001BEA  13FC 0000 000032B6      1135          move.b          #$00,SRC_MODE
00001BF2  13C7 000032B7           1136          move.b          d7,SRC_REGISTER
00001BF8                          1137  
00001BF8                          1138          * Based on deception, load memory
00001BF8  6100 0E2C               1139          bsr             ADDRESS_READ_DECISION_LOAD
00001BFC                          1140  
00001BFC                          1141          * Print out
00001BFC  6100 0AA2               1142          bsr             TAB
00001C00  6100 1468               1143          bsr             INITIAL_FOUR_EA_LOAD_OUT
00001C04                          1144  
00001C04  6100 0A8C               1145          bsr             NEWLINE
00001C08                          1146  
00001C08  6000 F676               1147          bra             MAIN_LOOP
00001C0C                          1148  MCOD_INVALID
00001C0C  6000 05F0               1149          bra             INVALID_S
00001C10                          1150  
00001C10                          1151  
00001C10                          1152  * Mnemonic: sub
00001C10                          1153  MC_SUB
00001C10  6100 0D28               1154          bsr             INITIAL_FOUR_EA_LOAD
00001C14                          1155  
00001C14                          1156          * sub invalid cases #7, #3
00001C14  0C39 0007 000032B5      1157          cmp.b           #7,DEST_MODE
00001C1C  6700 001E               1158          beq             MCSB_INVALID
00001C20  0C39 0003 000032B5      1159          cmp.b           #3,DEST_MODE
00001C28  6700 0012               1160          beq             MCSB_INVALID
00001C2C                          1161  
00001C2C                          1162          * This is valid OR so printout OR.
00001C2C  6100 0A72               1163          bsr             TAB
00001C30  6100 07DC               1164          bsr             SUB_S
00001C34                          1165  
00001C34                          1166          * Predefine code to print size tag, and two operands
00001C34  6100 147A               1167          bsr             FOUR_OPCODE_LOAD_OUT
00001C38                          1168  
00001C38  6000 F646               1169          bra             MAIN_LOOP
00001C3C                          1170  
00001C3C                          1171  MCSB_INVALID
00001C3C  6000 05C0               1172          bra             INVALID_S
00001C40                          1173  
00001C40                          1174  
00001C40                          1175  * Mnemonic: cmp
00001C40                          1176  MC_CMP
00001C40                          1177          ** Load initial four instruction.
00001C40  6100 0CF8               1178          bsr             INITIAL_FOUR_EA_LOAD
00001C44                          1179  
00001C44                          1180          * cmp valid cases bigger or equal to #3
00001C44  0C39 0003 000032B5      1181          cmp.b           #3,DEST_MODE
00001C4C  6400 0012               1182          bcc             MCCP_INVALID
00001C50                          1183  
00001C50                          1184          * Invalid common operation
00001C50                          1185  
00001C50                          1186          * This is valid OR so printout OR.
00001C50  6100 0A4E               1187          bsr             TAB
00001C54  6100 07C6               1188          bsr             CMP_S
00001C58                          1189  
00001C58                          1190          * Predefine code to print size tag, and two operands
00001C58  6100 1456               1191          bsr             FOUR_OPCODE_LOAD_OUT
00001C5C                          1192  
00001C5C  6000 F622               1193          bra             MAIN_LOOP
00001C60                          1194  
00001C60                          1195  MCCP_INVALID
00001C60  6000 059C               1196          bra             INVALID_S
00001C64                          1197  
00001C64                          1198  
00001C64                          1199  * Mnemonic: and, muls, mulu
00001C64                          1200  MC_AND_MULU
00001C64  6100 0CD4               1201          bsr             INITIAL_FOUR_EA_LOAD
00001C68                          1202  MAM_MULS
00001C68                          1203          * Check for MULS
00001C68  0C39 0007 000032B5      1204          cmp.b           #7,DEST_MODE
00001C70  6600 002E               1205          bne             MAM_MULU
00001C74  6100 1612               1206          bsr             SIZE_WORD
00001C78  13FC 0000 000032B5      1207          move.b          #$00,DEST_MODE
00001C80  6100 0DA4               1208          bsr             ADDRESS_READ_DECISION_LOAD
00001C84                          1209  
00001C84  6100 0A1A               1210          bsr             TAB
00001C88  6100 07AE               1211          bsr             MULS_S
00001C8C  6100 05A0               1212          bsr             SIZE_TAG_S
00001C90                          1213  
00001C90  6100 0A0E               1214          bsr             TAB
00001C94  6100 13D4               1215          bsr             INITIAL_FOUR_EA_LOAD_OUT
00001C98                          1216  
00001C98  6100 09F8               1217          bsr             NEWLINE
00001C9C  6000 F5E2               1218          bra             MAIN_LOOP
00001CA0                          1219  MAM_MULU
00001CA0                          1220          * Check for MULS
00001CA0  0C39 0003 000032B5      1221          cmp.b           #3,DEST_MODE
00001CA8  6600 002E               1222          bne             MAM_AND
00001CAC  6100 15DA               1223          bsr             SIZE_WORD
00001CB0  13FC 0000 000032B5      1224          move.b          #$00,DEST_MODE
00001CB8  6100 0D6C               1225          bsr             ADDRESS_READ_DECISION_LOAD
00001CBC                          1226  
00001CBC  6100 09E2               1227          bsr             TAB
00001CC0  6100 0784               1228          bsr             MULU_S
00001CC4  6100 0568               1229          bsr             SIZE_TAG_S
00001CC8                          1230  
00001CC8  6100 09D6               1231          bsr             TAB
00001CCC  6100 139C               1232          bsr             INITIAL_FOUR_EA_LOAD_OUT
00001CD0                          1233  
00001CD0  6100 09C0               1234          bsr             NEWLINE
00001CD4  6000 F5AA               1235          bra             MAIN_LOOP
00001CD8                          1236  MAM_AND
00001CD8                          1237          * Invalid common operation
00001CD8                          1238          ** Setting the size
00001CD8                          1239  
00001CD8                          1240          * This is valid AND so printout AND.
00001CD8  6100 09C6               1241          bsr             TAB
00001CDC  6100 074C               1242          bsr             AND_S
00001CE0                          1243  
00001CE0                          1244          * Predefine code to print size tag, and two operands
00001CE0  6100 13CE               1245          bsr             FOUR_OPCODE_LOAD_OUT
00001CE4                          1246  
00001CE4  6000 F59A               1247          bra             MAIN_LOOP
00001CE8                          1248  
00001CE8                          1249  MAM_INVALID
00001CE8  6000 0514               1250          bra             INVALID_S
00001CEC                          1251  
00001CEC                          1252  * Mnemonic: add, adda
00001CEC                          1253  MC_ADD_ADDA
00001CEC  6100 0C4C               1254          bsr             INITIAL_FOUR_EA_LOAD
00001CF0                          1255  MCADDDA_ADD
00001CF0                          1256          *Add cases check
00001CF0                          1257  
00001CF0                          1258          ** ADDA cases are #7 #3
00001CF0  0C39 0007 000032B5      1259          cmp.b           #7,DEST_MODE
00001CF8  6700 001E               1260          beq             MCADDDA_ADDA
00001CFC  0C39 0003 000032B5      1261          cmp.b           #3,DEST_MODE
00001D04  6700 0012               1262          beq             MCADDDA_ADDA
00001D08                          1263          * -----------------------------
00001D08                          1264  
00001D08                          1265          * It's not ADDA, so its ADD
00001D08  6100 0996               1266          bsr             TAB
00001D0C  6100 0746               1267          bsr             ADD_S
00001D10                          1268  
00001D10                          1269          * Predefine code to print size tag, and two operands
00001D10  6100 139E               1270          bsr             FOUR_OPCODE_LOAD_OUT
00001D14                          1271  
00001D14  6000 F56A               1272          bra             MAIN_LOOP
00001D18                          1273  
00001D18                          1274  MCADDDA_ADDA
00001D18                          1275          * It's ADDA.
00001D18                          1276          * converting manually.
00001D18  6100 0986               1277          bsr             TAB
00001D1C  6100 0744               1278          bsr             ADDA_S
00001D20                          1279  
00001D20                          1280  *Size operation
00001D20                          1281  MCADDDA_ADDA_WORD
00001D20  0C39 0003 000032B5      1282          cmp.b           #3,DEST_MODE
00001D28  6600 000A               1283          bne             MCADDDA_ADDA_LONG
00001D2C  6100 155A               1284          bsr             SIZE_WORD
00001D30  6000 0012               1285          bra             MCADDDA_ADDA_OUT
00001D34                          1286  MCADDDA_ADDA_LONG
00001D34  0C39 0007 000032B5      1287          cmp.b           #7,DEST_MODE
00001D3C  6600 0026               1288          bne             MCADDDA_INVALID
00001D40  6100 1550               1289          bsr             SIZE_LONG
00001D44                          1290  MCADDDA_ADDA_OUT
00001D44                          1291          * This is valid OR so printout OR.
00001D44  6100 04E8               1292          bsr             SIZE_TAG_S
00001D48                          1293  MCADDDA_ADDA_OUT_AN
00001D48                          1294          * Set dest mode as register (Deception!!)
00001D48  13FC 0001 000032B5      1295          move.b          #$01,DEST_MODE
00001D50                          1296  
00001D50                          1297          * Based on deception, load memory
00001D50  6100 0CD4               1298          bsr             ADDRESS_READ_DECISION_LOAD
00001D54                          1299  
00001D54                          1300          * Print out
00001D54  6100 094A               1301          bsr             TAB
00001D58  6100 1310               1302          bsr             INITIAL_FOUR_EA_LOAD_OUT
00001D5C                          1303  
00001D5C  6100 0934               1304          bsr             NEWLINE
00001D60                          1305          
00001D60  6000 F51E               1306          bra             MAIN_LOOP
00001D64                          1307  
00001D64                          1308  MCADDDA_INVALID
00001D64  6000 0498               1309          bra             INVALID_S
00001D68                          1310  
00001D68                          1311  * Mnemonic: asr, asl, lsr, lsl, ror, rol
00001D68                          1312  MC_ASR_ROL
00001D68                          1313          * shift and rotation common operation.
00001D68                          1314          * Load the data, and set to
00001D68                          1315          * SRC_MODE
00001D68                          1316          * DST_MODE
00001D68                          1317          * SRC_REGISTER
00001D68                          1318          * DST_REGISTER
00001D68  3E39 000032C2           1319          move.w          INITIAL_INSTRUCTION,d7
00001D6E  6100 0C0A               1320          bsr             INITIAL_TWO_EA_LOAD_SIZE
00001D72  6100 0BC6               1321          bsr             INITIAL_FOUR_EA_LOAD
00001D76                          1322  
00001D76  0C39 0003 000032C0      1323          cmp.b           #3,SIZE
00001D7E  6700 02B8               1324          beq             MAR_TO_ADDRESS          * It has very different instruction set
00001D82                          1325  
00001D82                          1326  MAR_TO_REGISTER
00001D82  6100 149A               1327          bsr             SIZE_CONVERT_TYPE_TWO
00001D86  0807 0005               1328          btst            #5,d7
00001D8A  6600 000A               1329          bne             MTR_DXDY
00001D8E  0807 0005               1330          btst            #5,d7
00001D92  6700 0138               1331          beq             MTR_EADY
00001D96                          1332  * CASE 1, DX,DY
00001D96                          1333  MTR_DXDY
00001D96                          1334          * Common operation
00001D96  13FC 0000 000032B6      1335          move.b          #0,SRC_MODE
00001D9E  13FC 0000 000032B5      1336          move.b          #0,DEST_MODE
00001DA6  1C39 000032B7           1337          move.b          SRC_REGISTER,d6
00001DAC  13F9 000032B4 000032B7  1338          move.b          DEST_REGISTER,SRC_REGISTER
00001DB6  13C6 000032B4           1339          move.b          d6,DEST_REGISTER
00001DBC                          1340  
00001DBC                          1341          * branching
00001DBC  0807 0004               1342          btst            #4,d7
00001DC0  6600 00B2               1343          bne             MTR_DXDY_ROd
00001DC4  0807 0003               1344          btst            #3,d7
00001DC8  6600 005A               1345          bne             MTR_DXDY_LSd
00001DCC  0807 0003               1346          btst            #3,d7
00001DD0  6700 0002               1347          beq             MTR_DXDY_ASd
00001DD4                          1348  
00001DD4                          1349  MTR_DXDY_ASd
00001DD4                          1350          * Now it is valid
00001DD4  0807 0008               1351          btst            #8,d7
00001DD8  6700 000A               1352          beq             MTR_DXDY_ASR
00001DDC  0807 0008               1353          btst            #8,d7
00001DE0  6600 0022               1354          bne             MTR_DXDY_ASL
00001DE4                          1355  MTR_DXDY_ASR
00001DE4  6100 133E               1356          bsr             IS_VALID
00001DE8  6100 08B6               1357          bsr             TAB
00001DEC  6100 0682               1358          bsr             ASR_S
00001DF0  6100 043C               1359          bsr             SIZE_TAG_S
00001DF4  6100 08AA               1360          bsr             TAB
00001DF8                          1361  
00001DF8  6100 1270               1362          bsr             INITIAL_FOUR_EA_LOAD_OUT
00001DFC  6100 0894               1363          bsr             NEWLINE
00001E00                          1364  
00001E00  6000 036A               1365          bra             MC_ASR_ROL_FINAL 
00001E04                          1366  MTR_DXDY_ASL
00001E04  6100 131E               1367          bsr             IS_VALID
00001E08  6100 0896               1368          bsr             TAB
00001E0C  6100 0670               1369          bsr             ASL_S
00001E10  6100 041C               1370          bsr             SIZE_TAG_S
00001E14  6100 088A               1371          bsr             TAB
00001E18                          1372  
00001E18  6100 1250               1373          bsr             INITIAL_FOUR_EA_LOAD_OUT
00001E1C  6100 0874               1374          bsr             NEWLINE
00001E20                          1375  
00001E20  6000 034A               1376          bra             MC_ASR_ROL_FINAL 
00001E24                          1377  
00001E24                          1378  
00001E24                          1379  MTR_DXDY_LSd
00001E24                          1380          * Now it is valid
00001E24  0807 0008               1381          btst            #8,d7
00001E28  6700 000A               1382          beq             MTR_DXDY_LSR
00001E2C  0807 0008               1383          btst            #8,d7
00001E30  6600 0022               1384          bne             MTR_DXDY_LSL
00001E34                          1385  MTR_DXDY_LSR
00001E34  6100 12EE               1386          bsr             IS_VALID
00001E38  6100 0866               1387          bsr             TAB
00001E3C  6100 064E               1388          bsr             LSR_S
00001E40  6100 03EC               1389          bsr             SIZE_TAG_S
00001E44  6100 085A               1390          bsr             TAB
00001E48                          1391  
00001E48  6100 1220               1392          bsr             INITIAL_FOUR_EA_LOAD_OUT
00001E4C  6100 0844               1393          bsr             NEWLINE
00001E50                          1394  
00001E50  6000 031A               1395          bra             MC_ASR_ROL_FINAL  
00001E54                          1396  
00001E54                          1397  MTR_DXDY_LSL
00001E54  6100 12CE               1398          bsr             IS_VALID
00001E58  6100 0846               1399          bsr             TAB
00001E5C  6100 062E               1400          bsr             LSR_S
00001E60  6100 03CC               1401          bsr             SIZE_TAG_S
00001E64  6100 083A               1402          bsr             TAB
00001E68                          1403  
00001E68  6100 1200               1404          bsr             INITIAL_FOUR_EA_LOAD_OUT
00001E6C  6100 0824               1405          bsr             NEWLINE
00001E70                          1406  
00001E70  6000 02FA               1407          bra             MC_ASR_ROL_FINAL  
00001E74                          1408  
00001E74                          1409  MTR_DXDY_ROd
00001E74                          1410          * invalid check
00001E74  0807 0003               1411          btst            #3,d7
00001E78  6700 02F6               1412          beq             MC_ASR_ROL_INVALID
00001E7C                          1413  
00001E7C                          1414          * Now it is valid
00001E7C  0807 0008               1415          btst            #8,d7
00001E80  6700 000A               1416          beq             MTR_DXDY_ROR
00001E84  0807 0008               1417          btst            #8,d7
00001E88  6600 0022               1418          bne             MTR_DXDY_ROL
00001E8C                          1419  
00001E8C                          1420  MTR_DXDY_ROR
00001E8C  6100 1296               1421          bsr             IS_VALID
00001E90  6100 080E               1422          bsr             TAB
00001E94  6100 0612               1423          bsr             ROR_S
00001E98  6100 0394               1424          bsr             SIZE_TAG_S
00001E9C  6100 0802               1425          bsr             TAB
00001EA0                          1426  
00001EA0  6100 11C8               1427          bsr             INITIAL_FOUR_EA_LOAD_OUT
00001EA4  6100 07EC               1428          bsr             NEWLINE
00001EA8                          1429  
00001EA8  6000 02C2               1430          bra             MC_ASR_ROL_FINAL  
00001EAC                          1431  MTR_DXDY_ROL
00001EAC  6100 1276               1432          bsr             IS_VALID
00001EB0  6100 07EE               1433          bsr             TAB
00001EB4  6100 0600               1434          bsr             ROL_S
00001EB8  6100 0374               1435          bsr             SIZE_TAG_S
00001EBC  6100 07E2               1436          bsr             TAB
00001EC0                          1437  
00001EC0  6100 11A8               1438          bsr             INITIAL_FOUR_EA_LOAD_OUT
00001EC4  6100 07CC               1439          bsr             NEWLINE
00001EC8                          1440  
00001EC8  6000 02A2               1441          bra             MC_ASR_ROL_FINAL  
00001ECC                          1442  
00001ECC                          1443  
00001ECC                          1444  
00001ECC                          1445  *CASE 2 <EA>,DY
00001ECC                          1446  MTR_EADY
00001ECC                          1447          *common for eady
00001ECC  13FC 0007 000032B6      1448          move.b          #7,SRC_MODE
00001ED4  13FC 0000 000032B5      1449          move.b          #0,DEST_MODE
00001EDC  4246                    1450          clr.w           d6
00001EDE  1C39 000032B4           1451          move.b          DEST_REGISTER,d6
00001EE4  33C6 000032B8           1452          move.w          d6,SRC_NUMBER_DATA
00001EEA  13F9 000032B7 000032B4  1453          move.b          SRC_REGISTER,DEST_REGISTER
00001EF4  13FC 0004 000032B7      1454          move.b          #4,SRC_REGISTER
00001EFC                          1455  
00001EFC  0C79 0000 000032B8      1456          cmp.w           #0,SRC_NUMBER_DATA
00001F04  6600 000A               1457          bne             MTR_EADY_DECISION
00001F08  33FC 0008 000032B8      1458          move.w          #8,SRC_NUMBER_DATA
00001F10                          1459  MTR_EADY_DECISION
00001F10  0807 0004               1460          btst            #4,d7
00001F14  6600 00C2               1461          bne             MTR_EADY_ROd
00001F18  0807 0003               1462          btst            #3,d7
00001F1C  6600 0062               1463          bne             MTR_EADY_LSd
00001F20  0807 0003               1464          btst            #3,d7
00001F24  6700 0002               1465          beq             MTR_EADY_ASd
00001F28                          1466  
00001F28                          1467  
00001F28                          1468  MTR_EADY_ASd
00001F28                          1469          * Now it is valid
00001F28  0807 0008               1470          btst            #8,d7
00001F2C  6700 000A               1471          beq             MTR_EADY_ASR
00001F30  0807 0008               1472          btst            #8,d7
00001F34  6600 0026               1473          bne             MTR_EADY_ASL
00001F38                          1474  MTR_EADY_ASR
00001F38  6100 11EA               1475          bsr             IS_VALID
00001F3C  6100 0762               1476          bsr             TAB
00001F40  6100 052E               1477          bsr             ASR_S
00001F44  6100 02E8               1478          bsr             SIZE_TAG_S
00001F48  6100 0756               1479          bsr             TAB
00001F4C                          1480  
00001F4C  6100 1330               1481          bsr             SIZE_BYTE
00001F50  6100 1118               1482          bsr             INITIAL_FOUR_EA_LOAD_OUT
00001F54  6100 073C               1483          bsr             NEWLINE
00001F58                          1484  
00001F58  6000 0212               1485          bra             MC_ASR_ROL_FINAL 
00001F5C                          1486  MTR_EADY_ASL
00001F5C  6100 11C6               1487          bsr             IS_VALID
00001F60  6100 073E               1488          bsr             TAB
00001F64  6100 0518               1489          bsr             ASL_S
00001F68  6100 02C4               1490          bsr             SIZE_TAG_S
00001F6C  6100 0732               1491          bsr             TAB
00001F70                          1492  
00001F70  6100 130C               1493          bsr             SIZE_BYTE
00001F74  6100 10F4               1494          bsr             INITIAL_FOUR_EA_LOAD_OUT
00001F78  6100 0718               1495          bsr             NEWLINE
00001F7C                          1496  
00001F7C  6000 01EE               1497          bra             MC_ASR_ROL_FINAL 
00001F80                          1498  
00001F80                          1499  
00001F80                          1500  MTR_EADY_LSd
00001F80                          1501          * Now it is valid
00001F80  0807 0008               1502          btst            #8,d7
00001F84  6700 000A               1503          beq             MTR_EADY_LSR
00001F88  0807 0008               1504          btst            #8,d7
00001F8C  6600 0026               1505          bne             MTR_EADY_LSL
00001F90                          1506  MTR_EADY_LSR
00001F90  6100 1192               1507          bsr             IS_VALID
00001F94  6100 070A               1508          bsr             TAB
00001F98  6100 04F2               1509          bsr             LSR_S
00001F9C  6100 0290               1510          bsr             SIZE_TAG_S
00001FA0  6100 06FE               1511          bsr             TAB
00001FA4                          1512  
00001FA4  6100 12D8               1513          bsr             SIZE_BYTE
00001FA8  6100 10C0               1514          bsr             INITIAL_FOUR_EA_LOAD_OUT
00001FAC  6100 06E4               1515          bsr             NEWLINE
00001FB0                          1516  
00001FB0  6000 01BA               1517          bra             MC_ASR_ROL_FINAL 
00001FB4                          1518  MTR_EADY_LSL
00001FB4  6100 116E               1519          bsr             IS_VALID
00001FB8  6100 06E6               1520          bsr             TAB
00001FBC  6100 04DC               1521          bsr             LSL_S
00001FC0  6100 026C               1522          bsr             SIZE_TAG_S
00001FC4  6100 06DA               1523          bsr             TAB
00001FC8                          1524  
00001FC8  6100 12B4               1525          bsr             SIZE_BYTE
00001FCC  6100 109C               1526          bsr             INITIAL_FOUR_EA_LOAD_OUT
00001FD0  6100 06C0               1527          bsr             NEWLINE
00001FD4                          1528  
00001FD4  6000 0196               1529          bra             MC_ASR_ROL_FINAL 
00001FD8                          1530  
00001FD8                          1531  MTR_EADY_ROd
00001FD8                          1532          * invalid check
00001FD8  0807 0003               1533          btst            #3,d7
00001FDC  6700 0192               1534          beq             MC_ASR_ROL_INVALID
00001FE0                          1535  
00001FE0                          1536          * Now it is valid
00001FE0  0807 0008               1537          btst            #8,d7
00001FE4  6700 000A               1538          beq             MTR_EADY_ROR
00001FE8  0807 0008               1539          btst            #8,d7
00001FEC  6600 0026               1540          bne             MTR_EADY_ROL
00001FF0                          1541  MTR_EADY_ROR
00001FF0  6100 1132               1542          bsr             IS_VALID
00001FF4  6100 06AA               1543          bsr             TAB
00001FF8  6100 04AE               1544          bsr             ROR_S
00001FFC  6100 0230               1545          bsr             SIZE_TAG_S
00002000  6100 069E               1546          bsr             TAB
00002004                          1547  
00002004  6100 1278               1548          bsr             SIZE_BYTE
00002008  6100 1060               1549          bsr             INITIAL_FOUR_EA_LOAD_OUT
0000200C  6100 0684               1550          bsr             NEWLINE
00002010                          1551  
00002010  6000 015A               1552          bra             MC_ASR_ROL_FINAL 
00002014                          1553  
00002014                          1554  MTR_EADY_ROL
00002014  6100 110E               1555          bsr             IS_VALID
00002018  6100 0686               1556          bsr             TAB
0000201C  6100 0498               1557          bsr             ROL_S
00002020  6100 020C               1558          bsr             SIZE_TAG_S
00002024  6100 067A               1559          bsr             TAB
00002028                          1560  
00002028  6100 1254               1561          bsr             SIZE_BYTE
0000202C  6100 103C               1562          bsr             INITIAL_FOUR_EA_LOAD_OUT
00002030  6100 0660               1563          bsr             NEWLINE
00002034                          1564  
00002034  6000 0136               1565          bra             MC_ASR_ROL_FINAL 
00002038                          1566  
00002038                          1567  
00002038                          1568  
00002038                          1569  
00002038                          1570  MAR_TO_ADDRESS
00002038                          1571          * Only one Effective address and parameter
00002038  6100 124E               1572          bsr             SIZE_WORD       * Commonly size word
0000203C                          1573  
0000203C  0C39 0000 000032B4      1574          cmp.b           #0,DEST_REGISTER
00002044  6700 001E               1575          beq             MAR_TA_ASd
00002048  0C39 0001 000032B4      1576          cmp.b           #1,DEST_REGISTER
00002050  6700 006A               1577          beq             MAR_TA_LSd
00002054  0C39 0003 000032B4      1578          cmp.b           #3,DEST_REGISTER
0000205C  6700 00B6               1579          beq             MAR_TA_ROd
00002060                          1580  
00002060  6000 010E               1581          bra             MC_ASR_ROL_INVALID
00002064                          1582  
00002064                          1583  MAR_TA_ASd
00002064  13FC 0000 000032B5      1584          move.b          #0,DEST_MODE
0000206C  13FC 0000 000032B4      1585          move.b          #0,DEST_REGISTER
00002074                          1586  
00002074  6100 09B0               1587          bsr             ADDRESS_READ_DECISION_LOAD
00002078  6100 10AA               1588          bsr             IS_VALID
0000207C                          1589  
0000207C  0807 0008               1590          btst            #8,d7
00002080  6700 001E               1591          beq             MAR_TA_ASR
00002084                          1592  MAR_TA_ASL
00002084  6100 061A               1593          bsr             TAB
00002088  6100 03F4               1594          bsr             ASL_S
0000208C  6100 01A0               1595          bsr             SIZE_TAG_S
00002090  6100 060E               1596          bsr             TAB
00002094                          1597  
00002094  6100 0B16               1598          bsr             INITIAL_TWO_EA_LOAD_OUT
00002098  6100 05F8               1599          bsr             NEWLINE
0000209C  6000 00CE               1600          bra             MC_ASR_ROL_FINAL
000020A0                          1601  MAR_TA_ASR
000020A0  6100 05FE               1602          bsr             TAB
000020A4  6100 03CA               1603          bsr             ASR_S
000020A8  6100 0184               1604          bsr             SIZE_TAG_S
000020AC  6100 05F2               1605          bsr             TAB
000020B0                          1606  
000020B0  6100 0AFA               1607          bsr             INITIAL_TWO_EA_LOAD_OUT
000020B4  6100 05DC               1608          bsr             NEWLINE
000020B8                          1609  
000020B8  6000 00B2               1610          bra             MC_ASR_ROL_FINAL
000020BC                          1611  
000020BC                          1612  MAR_TA_LSd
000020BC  13FC 0000 000032B5      1613          move.b          #0,DEST_MODE
000020C4  13FC 0000 000032B4      1614          move.b          #0,DEST_REGISTER
000020CC                          1615  
000020CC  6100 0958               1616          bsr             ADDRESS_READ_DECISION_LOAD
000020D0  6100 1052               1617          bsr             IS_VALID
000020D4                          1618  
000020D4  0807 0008               1619          btst            #8,d7
000020D8  6700 001E               1620          beq             MAR_TA_LSR
000020DC                          1621  
000020DC                          1622  MAR_TA_LSL
000020DC  6100 05C2               1623          bsr             TAB
000020E0  6100 03B8               1624          bsr             LSL_S
000020E4  6100 0148               1625          bsr             SIZE_TAG_S
000020E8  6100 05B6               1626          bsr             TAB
000020EC                          1627  
000020EC  6100 0ABE               1628          bsr             INITIAL_TWO_EA_LOAD_OUT
000020F0  6100 05A0               1629          bsr             NEWLINE
000020F4                          1630  
000020F4  6000 0076               1631          bra             MC_ASR_ROL_FINAL
000020F8                          1632  MAR_TA_LSR
000020F8  6100 05A6               1633          bsr             TAB
000020FC  6100 038E               1634          bsr             LSR_S
00002100  6100 012C               1635          bsr             SIZE_TAG_S
00002104  6100 059A               1636          bsr             TAB
00002108                          1637  
00002108  6100 0AA2               1638          bsr             INITIAL_TWO_EA_LOAD_OUT
0000210C  6100 0584               1639          bsr             NEWLINE
00002110                          1640  
00002110  6000 005A               1641          bra             MC_ASR_ROL_FINAL
00002114                          1642  
00002114                          1643  
00002114                          1644  
00002114                          1645  MAR_TA_ROd
00002114  13FC 0000 000032B5      1646          move.b          #0,DEST_MODE
0000211C  13FC 0000 000032B4      1647          move.b          #0,DEST_REGISTER
00002124                          1648  
00002124  6100 0900               1649          bsr             ADDRESS_READ_DECISION_LOAD
00002128  6100 0FFA               1650          bsr             IS_VALID
0000212C                          1651  
0000212C  0807 0008               1652          btst            #8,d7
00002130  6700 001E               1653          beq             MAR_TA_ROR
00002134                          1654  MAR_TA_ROL
00002134  6100 056A               1655          bsr             TAB
00002138  6100 037C               1656          bsr             ROL_S
0000213C  6100 00F0               1657          bsr             SIZE_TAG_S
00002140  6100 055E               1658          bsr             TAB
00002144                          1659  
00002144  6100 0A66               1660          bsr             INITIAL_TWO_EA_LOAD_OUT
00002148  6100 0548               1661          bsr             NEWLINE
0000214C                          1662  
0000214C  6000 001E               1663          bra             MC_ASR_ROL_FINAL
00002150                          1664  MAR_TA_ROR
00002150  6100 054E               1665          bsr             TAB
00002154  6100 0352               1666          bsr             ROR_S
00002158  6100 00D4               1667          bsr             SIZE_TAG_S
0000215C  6100 0542               1668          bsr             TAB
00002160                          1669  
00002160  6100 0A4A               1670          bsr             INITIAL_TWO_EA_LOAD_OUT
00002164  6100 052C               1671          bsr             NEWLINE
00002168                          1672  
00002168  6000 0002               1673          bra             MC_ASR_ROL_FINAL
0000216C                          1674  MC_ASR_ROL_FINAL
0000216C  6000 F112               1675          bra             MAIN_LOOP
00002170                          1676  MC_ASR_ROL_INVALID
00002170  6000 008C               1677          bra             INVALID_S
00002174                          1678  
00002174                          1679  ** ----------------------------------------
00002174                          1680  ** Sub-functions for Mnemonics
00002174                          1681  
00002174                          1682  *** Clear unnecessary bit --------------------------
00002174                          1683  **** Left only three bit ****
00002174                          1684  THREE_BIT_ONLY
00002174  48E7 0100               1685                  movem.l         d7,-(sp)        Saving D7 to stack
00002178                          1686  
00002178  1E39 000032B2           1687                  move.b          CONVERSOIN_RESERVED,d7
0000217E  0887 0007               1688                  bclr            #$07,d7
00002182  0887 0006               1689                  bclr            #$06,d7
00002186  0887 0005               1690                  bclr            #$05,d7
0000218A  0887 0004               1691                  bclr            #$04,d7
0000218E  0887 0003               1692                  bclr            #$03,d7
00002192  13C7 000032B2           1693                  move.b          d7,CONVERSOIN_RESERVED
00002198                          1694  
00002198  4CDF 0080               1695                  movem.l         (sp)+,d7        Load d7 from stack
0000219C  4E75                    1696                  rts
0000219E                          1697  
0000219E                          1698  **** Left only two bit ****
0000219E                          1699  TWO_BIT_ONLY
0000219E  48E7 0100               1700                  movem.l         d7,-(sp)                Saving d7 to stack
000021A2                          1701  
000021A2  1E39 000032B2           1702                  move.b          CONVERSOIN_RESERVED,d7
000021A8  0887 0007               1703                  bclr            #$07,d7
000021AC  0887 0006               1704                  bclr            #$06,d7
000021B0  0887 0005               1705                  bclr            #$05,d7
000021B4  0887 0004               1706                  bclr            #$04,d7
000021B8  0887 0003               1707                  bclr            #$03,d7
000021BC  0887 0002               1708                  bclr            #$02,d7
000021C0  13C7 000032B2           1709                  move.b          d7,CONVERSOIN_RESERVED
000021C6                          1710  
000021C6  4CDF 0080               1711                  movem.l         (sp)+,d7                Load d7 from the stack
000021CA  4E75                    1712                  rts
000021CC                          1713  
000021CC                          1714  **** Left only One bit ****
000021CC                          1715  ONE_BIT_ONLY
000021CC  48E7 0100               1716                  movem.l         d7,-(sp)                        Saving d7 to stack
000021D0  1E39 000032B2           1717                  move.b          CONVERSOIN_RESERVED,d7
000021D6  0887 0007               1718                  bclr            #$07,d7
000021DA  0887 0006               1719                  bclr            #$06,d7
000021DE  0887 0005               1720                  bclr            #$05,d7
000021E2  0887 0004               1721                  bclr            #$04,d7
000021E6  0887 0003               1722                  bclr            #$03,d7
000021EA  0887 0002               1723                  bclr            #$02,d7
000021EE  0887 0001               1724                  bclr            #$01,d7
000021F2  13C7 000032B2           1725                  move.b          d7,CONVERSOIN_RESERVED
000021F8  4CDF 0080               1726                  movem.l         (sp)+,d7                        Load d7 from the stack
000021FC  4E75                    1727                  rts
000021FE                          1728  
000021FE  6100 04A0               1729  INVALID_S       bsr     TAB
00002202  4FF9 00100000           1730                  lea     STACK,sp
00002208  43F9 000027C8           1731                  lea     INVALID_INSTRUCTION_MESSAGE,a1
0000220E  103C 000E               1732                  move.b  #14,d0
00002212  4E4F                    1733                  trap    #15
00002214                          1734  
00002214  6100 048A               1735                  bsr     TAB
00002218  33F9 000032C2 000032A2  1736                  move.w  INITIAL_INSTRUCTION,WORD_OUT
00002222  6100 0068               1737                  bsr     WORD_OUT_S
00002226                          1738  
00002226  6100 046A               1739                  bsr     NEWLINE
0000222A                          1740  
0000222A  6000 F054               1741                  bra     MAIN_LOOP               * To ignore the invalid insructoin, proceed to the next loop.
0000222E                          1742  ** Sub-functions for Mnemonics
0000222E                          1743  ** ----------------------------------------
0000222E                          1744  
0000222E                          1745  
0000222E                          1746  **********************************************************
0000222E                          1747  * Based on the given size data, it will printout 
0000222E                          1748  * '.b' '.w' '.l'
0000222E                          1749  *--Size tag instructoin
0000222E                          1750  SIZE_TAG_S
0000222E                          1751  
0000222E                          1752  STS_DOT_BYTE_OUT
0000222E  0C39 0001 000032C0      1753          cmp.b           #BYTE,SIZE
00002236  6600 0008               1754          bne             STS_DOT_WORD_OUT
0000223A  6100 02A4               1755          bsr             BYTE_S
0000223E  4E75                    1756          rts
00002240                          1757  STS_DOT_WORD_OUT
00002240  0C39 0011 000032C0      1758          cmp.b           #WORD,SIZE
00002248  6600 0008               1759          bne             STS_DOT_LONG_OUT
0000224C  6100 0284               1760          bsr             WORD_S
00002250  4E75                    1761          rts
00002252                          1762  STS_DOT_LONG_OUT
00002252  0C39 0010 000032C0      1763          cmp.b           #LONG,SIZE
0000225A  6600 0008               1764          bne             STS_INVALID_SIZE
0000225E  6100 0264               1765          bsr             LONG_S
00002262  4E75                    1766          rts
00002264                          1767  STS_INVALID_SIZE
00002264  6098                    1768          bra             INVALID_S
00002266                          1769  *--> Size tag instruction end
00002266                          1770  ***************************************************************
00002266                          1771  
00002266                          1772  
00002266                          1773  * -------------------------------------------------------------------
00002266                          1774  * Address out instruction
00002266                          1775  *********************************************
00002266                          1776  * Read 8 character from the address.
00002266                          1777  ADDRESS_OUT
00002266  48E7 0300               1778          movem.l         d6-d7,-(sp)
0000226A                          1779          
0000226A  7C10                    1780          move.l          #16,d6
0000226C                          1781  
0000226C  2E0E                    1782          move.l          a6,d7
0000226E  EDAF                    1783          lsl.l           d6,d7
00002270  33C7 000032A2           1784          move.w          d7,WORD_OUT
00002276  6100 0014               1785          bsr             WORD_OUT_S
0000227A                          1786  
0000227A  ECAF                    1787          lsr.l           d6,d7
0000227C  33C7 000032A2           1788          move.w          d7,WORD_OUT
00002282  6100 0008               1789          bsr             WORD_OUT_S
00002286                          1790  
00002286  4CDF 00C0               1791          movem.l         (sp)+,d6-d7
0000228A  4E75                    1792          rts
0000228C                          1793  
0000228C                          1794  * Address out instruction end
0000228C                          1795  
0000228C                          1796  
0000228C                          1797  * -------------------------------------------------------------------
0000228C                          1798  * a5 word size out
0000228C                          1799  * Read 4 character from the address.
0000228C                          1800  * for(int i =0; i<4; i++), and i = d0
0000228C                          1801  WORD_OUT_S
0000228C  48E7 0300               1802          movem.l         d6-d7,-(sp)
00002290  4247                    1803          clr             d7
00002292                          1804  WOS_LOOP
00002292  3C39 000032A2           1805          move.w          WORD_OUT,d6
00002298                          1806  
00002298  13F9 000032A2 000032A0  1807          move.b          WORD_OUT,BYTE_OUT
000022A2  6100 0012               1808          bsr             BYTE_OUT_S
000022A6                          1809  
000022A6  13C6 000032A0           1810          move.b          D6,BYTE_OUT
000022AC  6100 0008               1811          bsr             BYTE_OUT_S
000022B0                          1812          
000022B0                          1813  
000022B0                          1814  WOS_FINAL
000022B0  4CDF 00C0               1815          movem.l         (sp)+,d6-d7
000022B4  4E75                    1816          rts
000022B6                          1817  * > word size out end
000022B6                          1818  * -------------------------------------------------------------------
000022B6                          1819  
000022B6                          1820  *********************************************************************
000022B6                          1821  * > Byte size out instructoin
000022B6                          1822  * -------------------------------------------------------------------
000022B6                          1823  * a5 word size out
000022B6                          1824  * Read 2 character from the address.
000022B6                          1825  * for(int i =0; i<2; i++), and i = d0
000022B6                          1826  BYTE_OUT_S
000022B6  48E7 FFFC               1827          movem.l     d0-d7/a0-a5,-(sp)
000022BA  4247                    1828          clr         d7
000022BC  1A39 000032A0           1829          move.b     BYTE_OUT,d5
000022C2                          1830  BO_LOOP_GET_TWO
000022C2  BE3C 0002               1831          cmp.b       #$02,d7                 i=8 Break statement
000022C6  6C00 001E               1832          bge         BO_PRINT
000022CA  5207                    1833          addi.b      #$01,d7                 i++
000022CC                          1834          
000022CC                          1835          * Getting only one character (from ?? to ?)
000022CC  1805                    1836          move.b      d5,d4
000022CE  0884 0004               1837          bclr        #4,d4
000022D2  0884 0005               1838          bclr        #5,d4
000022D6  0884 0006               1839          bclr        #6,d4
000022DA  0884 0007               1840          bclr        #7,d4
000022DE                          1841          
000022DE                          1842          * Getting next character
000022DE  E89D                    1843          ror.l       #4,d5
000022E0                          1844          
000022E0                          1845          * Save the Character at stack
000022E0  48A7 0800               1846          movem.w     d4,-(sp)
000022E4                          1847          
000022E4  60DC                    1848          bra         BO_LOOP_GET_TWO
000022E6                          1849  *********************************************
000022E6                          1850  BO_PRINT
000022E6  4247                    1851          clr         d7
000022E8                          1852  BO_PRINT_LOOP
000022E8                          1853          *for(inti=0;i<2;i++)
000022E8  BE3C 0002               1854          cmp.b       #$02,d7
000022EC  6C00 002C               1855          bge         BO_FINAL
000022F0  5207                    1856          addi.b      #$01,d7
000022F2  4280                    1857          clr.l       d0
000022F4  4C9F 0010               1858          movem.w     (sp)+,d4
000022F8  1204                    1859          move.b      d4,d1
000022FA                          1860  
000022FA                          1861          * Trap15 #6 will print value in d1
000022FA                          1862  BOP_0_TO_9
000022FA  B23C 0009               1863          cmp.b           #9,d1
000022FE  6200 000A               1864          bhi             BOP_A_TO_F
00002302  0601 0030               1865          addi.b          #$30,d1
00002306  6000 000A               1866          bra             BOP_PRINT 
0000230A                          1867  BOP_A_TO_F
0000230A  0601 0037               1868          addi.b          #$37,d1
0000230E  6000 0002               1869          bra             BOP_PRINT 
00002312                          1870  BOP_PRINT 
00002312  103C 0006               1871          move.b          #6,d0
00002316  4E4F                    1872          trap            #15
00002318  60CE                    1873          bra             BO_PRINT_LOOP
0000231A                          1874  
0000231A                          1875  BO_FINAL
0000231A  4CDF 3FFF               1876          movem.l     (sp)+,d0-d7/a0-a5           Move back to the stack
0000231E  4E75                    1877          rts
00002320                          1878          
00002320                          1879  * > Byte size out instructoin
00002320                          1880  *********************************************************************
00002320                          1881  
00002320                          1882  
00002320                          1883  
00002320                          1884  
00002320                          1885  
00002320                          1886  * Mnemonic disassembly end here
00002320                          1887  *******************************************************************************************
00002320                          1888  
00002320                          1889  *For the instruction 
00002320                          1890  
00002320                          1891  
00002320                          1892  ******************************************************************************
00002320                          1893  * This is to minimize the typing
00002320                          1894  * Pre-defined string instructions
00002320                          1895  ****************************************************************************
00002320                          1896  
00002320                          1897          **Printing save instructoin with bsr
00002320                          1898  * Assembly instruction.     
00002320  43F9 000026D6           1899  ADDI_S      LEA     ADDI_MESSAGE,A1  * loads Message into address
00002326  103C 000E               1900              MOVE.B  #14,D0           * Moves the number 14 into data register D0
0000232A  4E4F                    1901              TRAP    #15              * Displays meessage
0000232C  4E75                    1902              RTS
0000232E                          1903  
0000232E  43F9 000026DB           1904  SUBI_S      LEA     SUBI_MESSAGE,A1  * loads Message into address
00002334  103C 000E               1905              MOVE.B  #14,D0           * Moves the number 14 into data register D0
00002338  4E4F                    1906              TRAP    #15              * Displays meessage
0000233A  4E75                    1907              RTS
0000233C                          1908  
0000233C  43F9 000026E0           1909  MOVE_S    LEA     MOVE_MESSAGE,A1 * loads Message into address
00002342  103C 000E               1910              MOVE.B  #14,D0           * Moves the number 14 into data register D0
00002346  4E4F                    1911              TRAP    #15              * Displays meessage
00002348  4E75                    1912              RTS
0000234A                          1913              
0000234A  43F9 000026E5           1914  MOVEA_S     LEA     MOVEA_MESSAGE,A1 * loads Message into address
00002350  103C 000E               1915              MOVE.B  #14,D0           * Moves the number 14 into data register D0
00002354  4E4F                    1916              TRAP    #15              * Displays meessage
00002356  4E75                    1917              RTS
00002358                          1918          
00002358  43F9 000026EB           1919  CLR_S       LEA     CLR_MESSAGE,A1  * loads Message into address
0000235E  103C 000E               1920              MOVE.B  #14,D0           * Moves the number 14 into data register D0
00002362  4E4F                    1921              TRAP    #15              * Displays meessage
00002364  4E75                    1922              RTS
00002366                          1923  
00002366  43F9 000026EF           1924  NOP_S       LEA     NOP_MESSAGE,A1  * loads Message into address
0000236C  103C 000E               1925              MOVE.B  #14,D0           * Moves the number 14 into data register D0
00002370  4E4F                    1926              TRAP    #15              * Displays meessage
00002372  4E75                    1927              RTS
00002374                          1928  
00002374  43F9 000026F3           1929  RTS_S       LEA     RTS_MESSAGE,A1  * loads Message into address
0000237A  103C 000E               1930              MOVE.B  #14,D0           * Moves the number 14 into data register D0
0000237E  4E4F                    1931              TRAP    #15              * Displays meessage
00002380  4E75                    1932              RTS
00002382                          1933  
00002382  43F9 000026F7           1934  JSR_S       LEA     JSR_MESSAGE,A1  * loads Message into address
00002388  103C 000E               1935              MOVE.B  #14,D0           * Moves the number 14 into data register D0
0000238C  4E4F                    1936              TRAP    #15              * Displays meessage
0000238E  4E75                    1937              RTS
00002390                          1938  
00002390  43F9 000026FB           1939  MOVEM_S     LEA     MOVEM_MESSAGE,A1  * loads Message into address
00002396  103C 000E               1940              MOVE.B  #14,D0           * Moves the number 14 into data register D0
0000239A  4E4F                    1941              TRAP    #15              * Displays meessage
0000239C  4E75                    1942              RTS
0000239E                          1943  
0000239E  43F9 00002701           1944  LEA_S       LEA     LEA_MESSAGE,A1  * loads Message into address
000023A4  103C 000E               1945              MOVE.B  #14,D0           * Moves the number 14 into data register D0
000023A8  4E4F                    1946              TRAP    #15              * Displays meessage
000023AA  4E75                    1947              RTS
000023AC                          1948  
000023AC  43F9 00002705           1949  ADDQ_S      LEA     ADDQ_MESSAGE,A1  * loads Message into address
000023B2  103C 000E               1950              MOVE.B  #14,D0           * Moves the number 14 into data register D0
000023B6  4E4F                    1951              TRAP    #15              * Displays meessage
000023B8  4E75                    1952              RTS
000023BA                          1953  
000023BA  43F9 0000270A           1954  BCC_S       LEA     BCC_MESSAGE,A1  * loads Message into address
000023C0  103C 000E               1955              MOVE.B  #14,D0           * Moves the number 14 into data register D0
000023C4  4E4F                    1956              TRAP    #15              * Displays meessage
000023C6  4E75                    1957              RTS
000023C8                          1958  
000023C8  43F9 0000270E           1959  BGT_S       LEA     BGT_MESSAGE,A1  * loads Message into address
000023CE  103C 000E               1960              MOVE.B  #14,D0           * Moves the number 14 into data register D0
000023D2  4E4F                    1961              TRAP    #15              * Displays meessage
000023D4  4E75                    1962              RTS
000023D6                          1963  
000023D6  43F9 00002712           1964  BLE_S       LEA     BLE_MESSAGE,A1   * loads Message into address
000023DC  103C 000E               1965              MOVE.B  #14,D0           * Moves the number 14 into data register D0
000023E0  4E4F                    1966              TRAP    #15              * Displays meessage
000023E2                          1967          
000023E2  4E75                    1968              RTS
000023E4                          1969  
000023E4  43F9 00002716           1970  MOVEQ_S     LEA     MOVEQ_MESSAGE,A1  * loads Message into address
000023EA  103C 000E               1971              MOVE.B  #14,D0            * Moves the number 14 into data register D0
000023EE  4E4F                    1972              TRAP    #15               * Displays meessage
000023F0  4E75                    1973              RTS
000023F2                          1974   
000023F2  43F9 0000271C           1975  OR_S        LEA     OR_MESSAGE,A1   * loads Message into address
000023F8  103C 000E               1976              MOVE.B  #14,D0           * Moves the number 14 into data register D0
000023FC  4E4F                    1977              TRAP    #15              * Displays meessage
000023FE  4E75                    1978              RTS
00002400                          1979  
00002400  43F9 0000271F           1980  DIVU_S      LEA     DIVU_MESSAGE,A1  * loads Message into address
00002406  103C 000E               1981              MOVE.B  #14,D0           * Moves the number 14 into data register D0
0000240A  4E4F                    1982              TRAP    #15              * Displays meessage
0000240C  4E75                    1983              RTS
0000240E                          1984  
0000240E  43F9 00002724           1985  SUB_S       LEA     SUB_MESSAGE,A1   * loads Message into address
00002414  103C 000E               1986              MOVE.B  #14,D0           * Moves the number 14 into data register D0
00002418  4E4F                    1987              TRAP    #15              * Displays meessage
0000241A  4E75                    1988              RTS
0000241C                          1989  
0000241C  43F9 00002728           1990  CMP_S       LEA     CMP_MESSAGE,A1   * loads Message into address
00002422  103C 000E               1991              MOVE.B  #14,D0           * Moves the number 14 into data register D0
00002426  4E4F                    1992              TRAP    #15              * Displays meessage
00002428  4E75                    1993              RTS
0000242A                          1994  
0000242A  43F9 0000272C           1995  AND_S       LEA     AND_MESSAGE,A1   * loads Message into address
00002430  103C 000E               1996              MOVE.B  #14,D0           * Moves the number 14 into data register D0
00002434  4E4F                    1997              TRAP    #15              * Displays meessage
00002436  4E75                    1998              RTS
00002438                          1999  
00002438  43F9 00002730           2000  MULS_S      LEA     MULS_MESSAGE,A1  * loads Message into address
0000243E  103C 000E               2001              MOVE.B  #14,D0           * Moves the number 14 into data register D0
00002442  4E4F                    2002              TRAP    #15              * Displays meessage
00002444  4E75                    2003              RTS
00002446                          2004  
00002446  43F9 00002735           2005  MULU_S      LEA     MULU_MESSAGE,A1  * loads Message into address
0000244C  103C 000E               2006              MOVE.B  #14,D0           * Moves the number 14 into data register D0
00002450  4E4F                    2007              TRAP    #15              * Displays meessage
00002452                          2008          
00002452  4E75                    2009              RTS
00002454                          2010  
00002454  43F9 0000273A           2011  ADD_S       LEA     ADD_MESSAGE,A1   * loads Message into address
0000245A  103C 000E               2012              MOVE.B  #14,D0           * Moves the number 14 into data register D0
0000245E  4E4F                    2013              TRAP    #15              * Displays meessage
00002460  4E75                    2014              RTS
00002462                          2015  
00002462  43F9 0000273E           2016  ADDA_S      LEA     ADDA_MESSAGE,A1  * loads Message into address
00002468  103C 000E               2017              MOVE.B  #14,D0           * Moves the number 14 into data register D0
0000246C  4E4F                    2018              TRAP    #15              * Displays meessage
0000246E  4E75                    2019              RTS
00002470                          2020  
00002470  43F9 00002743           2021  ASR_S       LEA     ASR_MESSAGE,A1   * loads Message into address
00002476  103C 000E               2022              MOVE.B  #14,D0           * Moves the number 14 into data register D0
0000247A  4E4F                    2023              TRAP    #15              * Displays meessage
0000247C  4E75                    2024              RTS
0000247E                          2025  
0000247E  43F9 00002747           2026  ASL_S       LEA     ASL_MESSAGE,A1   * loads Message into address
00002484  103C 000E               2027              MOVE.B  #14,D0           * Moves the number 14 into data register D0
00002488  4E4F                    2028              TRAP    #15              * Displays meessage
0000248A  4E75                    2029              RTS
0000248C                          2030  
0000248C  43F9 0000274B           2031  LSR_S       LEA     LSR_MESSAGE,A1   * loads Message into address
00002492  103C 000E               2032              MOVE.B  #14,D0           * Moves the number 14 into data register D0
00002496  4E4F                    2033              TRAP    #15              * Displays meessage
00002498  4E75                    2034              RTS
0000249A                          2035  
0000249A  43F9 0000274F           2036  LSL_S       LEA     LSL_MESSAGE,A1   * loads Message into address
000024A0  103C 000E               2037              MOVE.B  #14,D0           * Moves the number 14 into data register D0
000024A4  4E4F                    2038              TRAP    #15              * Displays meessage
000024A6  4E75                    2039              RTS
000024A8                          2040  
000024A8  43F9 00002753           2041  ROR_S       LEA     ROR_MESSAGE,A1   * loads Message into address
000024AE  103C 000E               2042              MOVE.B  #14,D0           * Moves the number 14 into data register D0
000024B2  4E4F                    2043              TRAP    #15              * Displays meessage
000024B4  4E75                    2044              RTS
000024B6                          2045  
000024B6  43F9 00002757           2046  ROL_S       LEA     ROL_MESSAGE,A1   * loads Message into address
000024BC  103C 000E               2047              MOVE.B  #14,D0           * Moves the number 14 into data register D0
000024C0  4E4F                    2048              TRAP    #15              * Displays meessage
000024C2  4E75                    2049              RTS
000024C4                          2050  
000024C4                          2051  * Size instruction.
000024C4  43F9 000027B7           2052  LONG_S  LEA     LONG_MESSAGE,A1     * loads Message into address
000024CA  103C 000E               2053              MOVE.B  #14,D0           * Moves the number 14 into data register D0
000024CE  4E4F                    2054              TRAP    #15              * Displays meessage
000024D0  4E75                    2055              RTS
000024D2                          2056  
000024D2  43F9 000027BA           2057  WORD_S      LEA     WORD_MESSAGE,A1          * loads Message into address
000024D8  103C 000E               2058              MOVE.B  #14,D0           * Moves the number 14 into data register D0
000024DC  4E4F                    2059              TRAP    #15              * Displays meessage
000024DE  4E75                    2060              RTS
000024E0                          2061  
000024E0  43F9 000027BD           2062  BYTE_S      LEA     BYTE_MESSAGE,A1          * loads Message into address
000024E6  103C 000E               2063              MOVE.B  #14,D0           * Moves the number 14 into data register D0
000024EA  4E4F                    2064              TRAP    #15              * Displays meessage
000024EC  4E75                    2065              RTS
000024EE                          2066  
000024EE                          2067  * Data register.
000024EE  43F9 0000275B           2068  D_ZERO_S        LEA     D_ZERO_MESSAGE,A1
000024F4  103C 000E               2069                  MOVE.B  #14,D0
000024F8  4E4F                    2070                  TRAP    #15
000024FA  4E75                    2071                  RTS
000024FC  43F9 0000275E           2072  D_ONE_S         LEA     D_ONE_MESSAGE,A1
00002502  103C 000E               2073                  MOVE.B  #14,D0
00002506  4E4F                    2074                  TRAP    #15
00002508  4E75                    2075                  RTS
0000250A  43F9 00002761           2076  D_TWO_S         LEA     D_TWO_MESSAGE,A1
00002510  103C 000E               2077                  MOVE.B  #14,D0
00002514  4E4F                    2078                  TRAP    #15
00002516  4E75                    2079                  RTS
00002518  43F9 00002764           2080  D_THREE_S       LEA     D_THREE_MESSAGE,A1
0000251E  103C 000E               2081                  MOVE.B  #14,D0
00002522  4E4F                    2082                  TRAP    #15
00002524  4E75                    2083                  RTS
00002526  43F9 00002767           2084  D_FOUR_S        LEA     D_FOUR_MESSAGE,A1
0000252C  103C 000E               2085                  MOVE.B  #14,D0
00002530  4E4F                    2086                  TRAP    #15
00002532  4E75                    2087                  RTS
00002534  43F9 0000276A           2088  D_FIVE_S        LEA     D_FIVE_MESSAGE,A1
0000253A  103C 000E               2089                  MOVE.B  #14,D0
0000253E  4E4F                    2090                  TRAP    #15
00002540  4E75                    2091                  RTS
00002542  43F9 0000276D           2092  D_SIX_S         LEA     D_SIX_MESSAGE,A1
00002548  103C 000E               2093                  MOVE.B  #14,D0
0000254C  4E4F                    2094                  TRAP    #15
0000254E  4E75                    2095                  RTS
00002550  43F9 00002770           2096  D_SEVEN_S       LEA     D_SEVEN_MESSAGE,A1
00002556  103C 000E               2097                  MOVE.B  #14,D0
0000255A  4E4F                    2098                  TRAP    #15
0000255C  4E75                    2099                  RTS
0000255E                          2100  
0000255E                          2101  * Address Register.
0000255E  43F9 00002773           2102  A_ZERO_S        LEA     A_ZERO_MESSAGE,A1
00002564  103C 000E               2103                  MOVE.B  #14,D0
00002568  4E4F                    2104                  TRAP    #15
0000256A  4E75                    2105                  RTS
0000256C  43F9 00002776           2106  A_ONE_S         LEA     A_ONE_MESSAGE,A1
00002572  103C 000E               2107                  MOVE.B  #14,D0
00002576  4E4F                    2108                  TRAP    #15
00002578  4E75                    2109                  RTS
0000257A  43F9 00002779           2110  A_TWO_S         LEA     A_TWO_MESSAGE,A1
00002580  103C 000E               2111                  MOVE.B  #14,D0
00002584  4E4F                    2112                  TRAP    #15
00002586  4E75                    2113                  RTS
00002588  43F9 0000277C           2114  A_THREE_S       LEA     A_THREE_MESSAGE,A1
0000258E  103C 000E               2115                  MOVE.B  #14,D0
00002592  4E4F                    2116                  TRAP    #15
00002594  4E75                    2117                  RTS
00002596  43F9 0000277F           2118  A_FOUR_S        LEA     A_FOUR_MESSAGE,A1
0000259C  103C 000E               2119                  MOVE.B  #14,D0
000025A0  4E4F                    2120                  TRAP    #15
000025A2  4E75                    2121                  RTS
000025A4  43F9 00002782           2122  A_FIVE_S        LEA     A_FIVE_MESSAGE,A1
000025AA  103C 000E               2123                  MOVE.B  #14,D0
000025AE  4E4F                    2124                  TRAP    #15
000025B0  4E75                    2125                  RTS
000025B2  43F9 00002785           2126  A_SIX_S         LEA     A_SIX_MESSAGE,A1
000025B8  103C 000E               2127                  MOVE.B  #14,D0
000025BC  4E4F                    2128                  TRAP    #15
000025BE  4E75                    2129                  RTS
000025C0  43F9 00002788           2130  A_SEVEN_S       LEA     A_SEVEN_MESSAGE,A1
000025C6  103C 000E               2131                  MOVE.B  #14,D0
000025CA  4E4F                    2132                  TRAP    #15
000025CC  4E75                    2133                  RTS
000025CE                          2134  
000025CE                          2135  * Address Register with paranthesis.
000025CE  43F9 0000278B           2136  A_ZERO_P_S      LEA     A_ZERO_P_MESSAGE,A1
000025D4  103C 000E               2137                  MOVE.B  #14,D0
000025D8  4E4F                    2138                  TRAP    #15
000025DA  4E75                    2139                  RTS
000025DC  43F9 00002790           2140  A_ONE_P_S       LEA     A_ONE_P_MESSAGE,A1
000025E2  103C 000E               2141                  MOVE.B  #14,D0
000025E6  4E4F                    2142                  TRAP    #15
000025E8  4E75                    2143                  RTS
000025EA  43F9 00002795           2144  A_TWO_P_S       LEA     A_TWO_P_MESSAGE,A1
000025F0  103C 000E               2145                  MOVE.B  #14,D0
000025F4  4E4F                    2146                  TRAP    #15
000025F6  4E75                    2147                  RTS
000025F8  43F9 0000279A           2148  A_THREE_P_S     LEA     A_THREE_P_MESSAGE,A1
000025FE  103C 000E               2149                  MOVE.B  #14,D0
00002602  4E4F                    2150                  TRAP    #15
00002604  4E75                    2151                  RTS
00002606  43F9 0000279F           2152  A_FOUR_P_S      LEA     A_FOUR_P_MESSAGE,A1
0000260C  103C 000E               2153                  MOVE.B  #14,D0
00002610  4E4F                    2154                  TRAP    #15
00002612  4E75                    2155                  RTS
00002614  43F9 000027A4           2156  A_FIVE_P_S      LEA     A_FIVE_P_MESSAGE,A1
0000261A  103C 000E               2157                  MOVE.B  #14,D0
0000261E  4E4F                    2158                  TRAP    #15
00002620  4E75                    2159                  RTS
00002622  43F9 000027A9           2160  A_SIX_P_S       LEA     A_SIX_P_MESSAGE,A1
00002628  103C 000E               2161                  MOVE.B  #14,D0
0000262C  4E4F                    2162                  TRAP    #15
0000262E  4E75                    2163                  RTS
00002630  43F9 000027AE           2164  A_SEVEN_P_S     LEA     A_SEVEN_P_MESSAGE,A1
00002636  103C 000E               2165                  MOVE.B  #14,D0
0000263A  4E4F                    2166                  TRAP    #15
0000263C  4E75                    2167                  RTS
0000263E  43F9 000027B3           2168  PLUS_S          LEA     PLUS_MESSAGE,a1
00002644  103C 000E               2169                  move.b  #14,d0
00002648  4E4F                    2170                  trap    #15
0000264A  4E75                    2171                  rts
0000264C  43F9 000027B5           2172  MINUS_S         LEA     MINUS_MESSAGE,a1
00002652  103C 000E               2173                  move.b  #14,d0
00002656  4E4F                    2174                  trap    #15
00002658  4E75                    2175                  rts
0000265A                          2176  
0000265A  43F9 000027C0           2177  DOLLAR_S        LEA     DOLLAR_MESSAGE,a1
00002660  103C 000E               2178                  move.b  #14,d0
00002664  4E4F                    2179                  trap    #15
00002666  4E75                    2180                  rts
00002668                          2181  
00002668  43F9 000027C2           2182  HASH_S          LEA     HASH_MESSAGE,a1
0000266E  103C 000E               2183                  move.b  #14,d0
00002672  4E4F                    2184                  trap    #15
00002674  4E75                    2185                  rts
00002676                          2186  
00002676  43F9 000027C4           2187  COMMA_S         LEA     COMMA_MESSAGE,a1
0000267C  103C 000E               2188                  move.b  #14,d0
00002680  4E4F                    2189                  trap    #15
00002682  4E75                    2190                  rts
00002684                          2191  
00002684  43F9 000027C6           2192  SLASH_S         LEA     SLASH_MESSAGE,a1
0000268A  103C 000E               2193                  move.b  #14,d0
0000268E  4E4F                    2194                  trap    #15
00002690  4E75                    2195                  rts
00002692                          2196  
00002692                          2197  * NewLine
00002692  43F9 000027F7           2198  NEWLINE         lea             CRLF,A1
00002698  103C 000E               2199                  move.b          #14,d0
0000269C  4E4F                    2200                  trap            #15
0000269E  4E75                    2201                  rts
000026A0                          2202  
000026A0                          2203  * Tab
000026A0  43F9 000027FA           2204  TAB             lea             TAB_SPACE,a1
000026A6  103C 000E               2205                  move.b          #14,d0
000026AA  4E4F                    2206                  trap            #15
000026AC  4E75                    2207                  rts
000026AE                          2208  
000026AE                          2209  * Space
000026AE  43F9 000027FC           2210  SPACE_S         lea            SPACE,a1
000026B4  103C 000E               2211                  move.b          #14,d0
000026B8  4E4F                    2212                  trap            #15
000026BA  4E75                    2213                  rts
000026BC                          2214  
000026BC                          2215  * Press Enter Message
000026BC                          2216  PRESS_ENTER_S
000026BC  43F9 000027DF           2217                  lea     PRESS_ENTER_MESSAGE,a1
000026C2  103C 000E               2218                  move.b  #14,d0
000026C6  4E4F                    2219                  trap    #15
000026C8  4E75                    2220                  rts
000026CA                          2221  
000026CA                          2222  
000026CA                          2223  * Clear the screen
000026CA                          2224  CLEAR_SCREEN
000026CA  323C FF00               2225                  move.w  #$ff00,d1
000026CE  103C 000B               2226                  move.b  #11,d0
000026D2  4E4F                    2227                  trap    #15
000026D4  4E75                    2228                  rts
000026D6                          2229  
000026D6                          2230  
000026D6                          2231  
000026D6                          2232  
000026D6= 41 44 44 49 00          2233  ADDI_MESSAGE            DC.B    'ADDI',0
000026DB= 53 55 42 49 00          2234  SUBI_MESSAGE            DC.B    'SUBI',0
000026E0= 4D 4F 56 45 00          2235  MOVE_MESSAGE            DC.B    'MOVE',0
000026E5= 4D 4F 56 45 41 00       2236  MOVEA_MESSAGE           DC.B    'MOVEA',0
000026EB= 43 4C 52 00             2237  CLR_MESSAGE             DC.B    'CLR',0
000026EF= 4E 4F 50 00             2238  NOP_MESSAGE             DC.B    'NOP',0
000026F3= 52 54 53 00             2239  RTS_MESSAGE             DC.B    'RTS',0
000026F7= 4A 53 52 00             2240  JSR_MESSAGE             DC.B    'JSR',0
000026FB= 4D 4F 56 45 4D 00       2241  MOVEM_MESSAGE           DC.B    'MOVEM',0
00002701= 4C 45 41 00             2242  LEA_MESSAGE             DC.B    'LEA',0
00002705= 41 44 44 51 00          2243  ADDQ_MESSAGE            DC.B    'ADDQ',0
0000270A= 42 43 43 00             2244  BCC_MESSAGE             DC.B    'BCC',0
0000270E= 42 47 54 00             2245  BGT_MESSAGE             DC.B    'BGT',0
00002712= 42 4C 45 00             2246  BLE_MESSAGE             DC.B    'BLE',0
00002716= 4D 4F 56 45 51 00       2247  MOVEQ_MESSAGE           DC.B    'MOVEQ',0
0000271C= 4F 52 00                2248  OR_MESSAGE              DC.B    'OR',0
0000271F= 44 49 56 55 00          2249  DIVU_MESSAGE            DC.B    'DIVU',0
00002724= 53 55 42 00             2250  SUB_MESSAGE             DC.B    'SUB',0
00002728= 43 4D 50 00             2251  CMP_MESSAGE             DC.B    'CMP',0
0000272C= 41 4E 44 00             2252  AND_MESSAGE             DC.B    'AND',0
00002730= 4D 55 4C 53 00          2253  MULS_MESSAGE            DC.B    'MULS',0
00002735= 4D 55 4C 55 00          2254  MULU_MESSAGE            DC.B    'MULU',0
0000273A= 41 44 44 00             2255  ADD_MESSAGE             DC.B    'ADD',0
0000273E= 41 44 44 41 00          2256  ADDA_MESSAGE            DC.B    'ADDA',0
00002743= 41 53 52 00             2257  ASR_MESSAGE             DC.B    'ASR',0
00002747= 41 53 4C 00             2258  ASL_MESSAGE             DC.B    'ASL',0
0000274B= 4C 53 52 00             2259  LSR_MESSAGE             DC.B    'LSR',0
0000274F= 4C 53 4C 00             2260  LSL_MESSAGE             DC.B    'LSL',0
00002753= 52 4F 52 00             2261  ROR_MESSAGE             DC.B    'ROR',0
00002757= 52 4F 4C 00             2262  ROL_MESSAGE             DC.B    'ROL',0
0000275B                          2263  
0000275B                          2264  * Data Register
0000275B= 44 30 00                2265  D_ZERO_MESSAGE          DC.B    'D0',0
0000275E= 44 31 00                2266  D_ONE_MESSAGE           DC.B    'D1',0
00002761= 44 32 00                2267  D_TWO_MESSAGE           DC.B    'D2',0
00002764= 44 33 00                2268  D_THREE_MESSAGE         DC.B    'D3',0
00002767= 44 34 00                2269  D_FOUR_MESSAGE          DC.B    'D4',0
0000276A= 44 35 00                2270  D_FIVE_MESSAGE          DC.B    'D5',0
0000276D= 44 36 00                2271  D_SIX_MESSAGE           DC.B    'D6',0
00002770= 44 37 00                2272  D_SEVEN_MESSAGE         DC.B    'D7',0
00002773                          2273  
00002773                          2274  * Address Register
00002773= 41 30 00                2275  A_ZERO_MESSAGE          DC.B    'A0',0
00002776= 41 31 00                2276  A_ONE_MESSAGE           DC.B    'A1',0
00002779= 41 32 00                2277  A_TWO_MESSAGE           DC.B    'A2',0
0000277C= 41 33 00                2278  A_THREE_MESSAGE         DC.B    'A3',0
0000277F= 41 34 00                2279  A_FOUR_MESSAGE          DC.B    'A4',0
00002782= 41 35 00                2280  A_FIVE_MESSAGE          DC.B    'A5',0
00002785= 41 36 00                2281  A_SIX_MESSAGE           DC.B    'A6',0
00002788= 41 37 00                2282  A_SEVEN_MESSAGE         DC.B    'A7',0
0000278B                          2283  
0000278B                          2284  * Address with Paranthesis Register
0000278B= 28 41 30 29 00          2285  A_ZERO_P_MESSAGE          DC.B    '(A0)',0
00002790= 28 41 31 29 00          2286  A_ONE_P_MESSAGE           DC.B    '(A1)',0
00002795= 28 41 32 29 00          2287  A_TWO_P_MESSAGE           DC.B    '(A2)',0
0000279A= 28 41 33 29 00          2288  A_THREE_P_MESSAGE         DC.B    '(A3)',0
0000279F= 28 41 34 29 00          2289  A_FOUR_P_MESSAGE          DC.B    '(A4)',0
000027A4= 28 41 35 29 00          2290  A_FIVE_P_MESSAGE          DC.B    '(A5)',0
000027A9= 28 41 36 29 00          2291  A_SIX_P_MESSAGE           DC.B    '(A6)',0
000027AE= 28 41 37 29 00          2292  A_SEVEN_P_MESSAGE         DC.B    '(A7)',0
000027B3                          2293  
000027B3                          2294  * Plus and minus sign
000027B3= 2B 00                   2295  PLUS_MESSAGE            dc.b    '+',0
000027B5= 2D 00                   2296  MINUS_MESSAGE           dc.b    '-',0
000027B7                          2297  
000027B7                          2298  * Size instruction.
000027B7= 2E 4C 00                2299  LONG_MESSAGE            DC.B    '.L',0
000027BA= 2E 57 00                2300  WORD_MESSAGE            DC.B    '.W',0
000027BD= 2E 42 00                2301  BYTE_MESSAGE            DC.B    '.B',0
000027C0                          2302  
000027C0                          2303  * Special character
000027C0= 24 00                   2304  DOLLAR_MESSAGE          DC.B    '$',0
000027C2= 23 00                   2305  HASH_MESSAGE            DC.B    '#',0
000027C4= 2C 00                   2306  COMMA_MESSAGE           DC.B    ',',0
000027C6= 2F 00                   2307  SLASH_MESSAGE           DC.B    '/',0
000027C8                          2308  
000027C8                          2309  * Invalid Insturction.
000027C8= 49 6E 76 61 6C 69 ...   2310  INVALID_INSTRUCTION_MESSAGE     DC.B    'Invalid Instruction!!!',0
000027DF                          2311  
000027DF                          2312  * Press Enter continue
000027DF= 50 72 65 73 73 20 ...   2313  PRESS_ENTER_MESSAGE             DC.B    'Press Enter to Continue',0
000027F7                          2314  
000027F7                          2315  * New Line, and tab, Space
000027F7= 0D 0A 00                2316  CRLF                    dc.b    CR,LF,0
000027FA= 09 00                   2317  TAB_SPACE               dc.b    HT,0
000027FC= 20 00                   2318  SPACE                   dc.b    ' ',0
000027FE                          2319  
000027FE                          2320  * Constants - Alphabetical
000027FE= 49 4E 56 41 4C 49 ...   2321  ERROR_1                 dc.b    'INVALID INPUT: too long',0
00002816= 49 4E 56 41 4C 49 ...   2322  ERROR_2                 dc.b    'INVALID INPUT: not within range',0
00002836= 49 4E 56 41 4C 49 ...   2323  ERROR_3                 dc.b    'INVALID INPUT: not recognized',0
00002854= 49 4E 56 41 4C 49 ...   2324  ERROR_4                 dc.b    'INVALID INPUT: less than start address',0
0000287B= 20 00 0D 0A             2325  NEW_LINE                dc.b    ' ',0,CR,LF
0000287F= 45 6E 74 65 72 20 ...   2326  PROMPT_1                dc.b    'Enter starting address. Range=[$3500,$9fff]',0
000028AB= 24 00                   2327  PROMPT_2                dc.b    '$',0
000028AD= 50 72 65 73 73 20 ...   2328  PROMPT_3                dc.b    'Press ENTER to continue...',0
000028C8= 57 6F 75 6C 64 20 ...   2329  PROMPT_4                dc.b    'Would you like to disassemble again? (Y/N)',0
000028F3= 3E 00                   2330  PROMPT_5                dc.b    '>',0
000028F5= 50 72 65 73 73 20 ...   2331  PROMPT_6                dc.b    'Press ENTER to continue...',0
00002910= 45 6E 74 65 72 20 ...   2332  PROMPT_7                dc.b    'Enter ending address. Range=[$3500,$9fff]',0
0000293A                          2333  
0000293A                          2334  * Const variable we need to invoke
0000293A  =00100000               2335  STACK                   equ             $100000
0000293A  =00007000               2336  DISASSEMBLE_FROM        equ             $7000
0000293A  =00000008               2337  BS                      equ             $08         Backspace
0000293A  =00000009               2338  HT                      equ             $09         Tab (horizontal 5 characters)
0000293A  =0000000A               2339  LF                      equ             $0A         New line (line feed)
0000293A  =0000000B               2340  VT                      equ             $0B         Vertical tab (4 lines)
0000293A  =0000000C               2341  FF                      equ             $0C         Form Feed (Always end printing with a Form Feed.)
0000293A  =0000000D               2342  CR                      equ             $0D         Carriage Return
0000293A                          2343  
0000293A                          2344  ** Size variable for size.
0000293A  =00000010               2345  LONG                    equ             $10
0000293A  =00000011               2346  WORD                    equ             $11
0000293A  =00000001               2347  BYTE                    equ             $01
0000293A                          2348  
0000293A                          2349  ** Lower and Upper bound
0000293A  =00003500               2350  LOWER_BOUND             equ             $3500
0000293A  =00009FFF               2351  UPPER_BOUND             equ             $9fff
0000293A                          2352          
0000293A                          2353  
0000293A                          2354  *******************************************************
0000293A                          2355  * Description: Odcode reading
0000293A                          2356  *1)
0000293A                          2357  ** INITIAL_FOUR_EA_LOAD
0000293A                          2358  *** ???? | DST Register(3) | Dest Mode(3) | Src Mode(3) | Src Register(3)
0000293A                          2359  
0000293A                          2360  *2) INITIAL_TWO_EA_LOAD
0000293A                          2361  ** ???? | ??? | ??? | Src Mode(3) | Src Register(3)
0000293A                          2362  
0000293A                          2363  *3) INITIAL_TWO_EA_LOAD_SIZE
0000293A                          2364  ** ???? | ???? | size(2) | Src Mode(3) | Src Register(3)
0000293A                          2365  *
0000293A                          2366  *
0000293A                          2367  * Description: Bit clear instructions
0000293A                          2368  * 1) CLEAR_THREE_BIT_S
0000293A                          2369  * 2) CLEAR_TWO_BIT_S
0000293A                          2370  
0000293A                          2371  
0000293A                          2372  *******************************************************
0000293A                          2373  * Effective address part
0000293A                          2374  * Load four EA (last four) from Initial instruction.
0000293A                          2375  INITIAL_FOUR_EA_LOAD
0000293A  48A7 0100               2376          movem.w         d7,-(sp)
0000293E                          2377  
0000293E  6100 0064               2378          bsr             INITIAL_TWO_EA_LOAD             *Load last two
00002942  3E39 000032C2           2379          move.w          INITIAL_INSTRUCTION,d7
00002948  EC5F                    2380          ror.w           #6,d7
0000294A  13C7 000032B2           2381          move.b          d7,CONVERSOIN_RESERVED
00002950  6100 F822               2382          bsr             THREE_BIT_ONLY
00002954  13F9 000032B2 000032B5  2383          move.b          CONVERSOIN_RESERVED,DEST_MODE
0000295E                          2384  
0000295E  E65F                    2385          ror.w           #3,d7
00002960  13C7 000032B2           2386          move.b          d7,CONVERSOIN_RESERVED
00002966  6100 F80C               2387          bsr             THREE_BIT_ONLY
0000296A  13F9 000032B2 000032B4  2388          move.b          CONVERSOIN_RESERVED,DEST_REGISTER
00002974                          2389  
00002974  4C9F 0080               2390          movem.w         (sp)+,d7
00002978                          2391  
00002978  4E75                    2392          rts
0000297A                          2393  
0000297A                          2394  INITIAL_TWO_EA_LOAD_SIZE
0000297A                          2395  
0000297A  48A7 0100               2396          movem.w         d7,-(sp)
0000297E                          2397  
0000297E  6100 0024               2398          bsr             INITIAL_TWO_EA_LOAD
00002982  3E39 000032C2           2399          move.w          INITIAL_INSTRUCTION,d7
00002988  EC1F                    2400          ror.b           #6,d7
0000298A  13C7 000032B2           2401          move.b          d7,CONVERSOIN_RESERVED
00002990  6100 F80C               2402          bsr             TWO_BIT_ONLY
00002994  13F9 000032B2 000032C0  2403          move.b          CONVERSOIN_RESERVED,SIZE
0000299E                          2404  
0000299E  4C9F 0080               2405          movem.w         (sp)+,d7       
000029A2                          2406  
000029A2  4E75                    2407          rts
000029A4                          2408  
000029A4                          2409  * Load two Ea(last two) from Initial instruction
000029A4                          2410  INITIAL_TWO_EA_LOAD
000029A4  48A7 0100               2411          movem.w         d7,-(sp)
000029A8                          2412  
000029A8  3E39 000032C2           2413          move.w          INITIAL_INSTRUCTION,d7
000029AE  13C7 000032B2           2414          move.b          d7,CONVERSOIN_RESERVED
000029B4  6100 F7BE               2415          bsr             THREE_BIT_ONLY
000029B8  13F9 000032B2 000032B7  2416          move.b          CONVERSOIN_RESERVED,SRC_REGISTER
000029C2                          2417  
000029C2  E65F                    2418          ror.w           #3,d7
000029C4  13C7 000032B2           2419          move.b          d7,CONVERSOIN_RESERVED
000029CA  6100 F7A8               2420          bsr             THREE_BIT_ONLY
000029CE  13F9 000032B2 000032B6  2421          move.b          CONVERSOIN_RESERVED,SRC_MODE
000029D8                          2422  
000029D8  4C9F 0080               2423          movem.w         (sp)+,d7          
000029DC                          2424  
000029DC  4E75                    2425          rts
000029DE                          2426  
000029DE                          2427  ** Expected to use with BGT, BLE, BCC
000029DE                          2428  INITIAL_DATA_EIGHT_LOAD
000029DE  48E7 0100               2429          movem.l         d7,-(sp)
000029E2                          2430  
000029E2  3E39 000032C2           2431          move.w          INITIAL_INSTRUCTION,d7
000029E8  13C7 000032B3           2432          move.b          d7,DATA_EIGHT_BIT
000029EE                          2433  
000029EE  4CDF 0080               2434          movem.l         (sp)+,d7     
000029F2                          2435  
000029F2  4E75                    2436          rts
000029F4                          2437  
000029F4                          2438  ***************************************************************
000029F4                          2439  * Clear 3 bit instructoins
000029F4                          2440  *-> BIT CLEAR START HERE
000029F4                          2441  CLEAR_ALL_BIT_S
000029F4  6100 000E               2442      bsr         CLEAR_THREE_BIT_S
000029F8  6100 0024               2443      bsr         CLEAR_TWO_BIT_S
000029FC  4279 000032B0           2444      clr.w       REGISTER_LIST_MASK
00002A02  4E75                    2445      rts
00002A04                          2446  
00002A04                          2447  CLEAR_THREE_BIT_S
00002A04                          2448          *clr.b   EA_MODE
00002A04                          2449          *clr.b   OP_MODE
00002A04                          2450          *clr.b   EA_REGISTER
00002A04  4239 000032B4           2451          clr.b   DEST_REGISTER
00002A0A  4239 000032B5           2452          clr.b   DEST_MODE
00002A10  4239 000032B6           2453          clr.b   SRC_MODE
00002A16  4239 000032B7           2454          clr.b   SRC_REGISTER
00002A1C                          2455          *clr.b   REGISTER
00002A1C                          2456          *clr.b   COUNT_REGISTER
00002A1C  4E75                    2457          rts
00002A1E                          2458  
00002A1E                          2459  * Clear 2 bit instruction
00002A1E                          2460  CLEAR_TWO_BIT_S
00002A1E  4239 000032C0           2461          clr.b   SIZE
00002A24  4E75                    2462          rts
00002A26                          2463  *-> BIT CLEAR END HERE
00002A26                          2464  ***************************************************************
00002A26                          2465  
00002A26                          2466  
00002A26                          2467          ** Decide whether to read more address or not.
00002A26                          2468  ADDRESS_READ_DECISION_LOAD
00002A26                          2469  ARDL_Source
00002A26  0C39 0007 000032B6      2470          cmp.b   #7,SRC_MODE
00002A2E  6600 00A0               2471          bne     ARDL_DST     * No source Data memory value
00002A32                          2472  ARDL_SOURCE_WORD
00002A32                          2473          * Word compare
00002A32  0C39 0000 000032B7      2474          cmp.b   #0,SRC_REGISTER
00002A3A  6600 000C               2475          bne     ARDL_SOURCE_LONG        * not word size
00002A3E  33DE 000032B8           2476          move.w  (a6)+,SRC_NUMBER_DATA
00002A44                          2477          *move.w  (a6),WORD_OUT
00002A44                          2478          * TODO: DELETE THIS
00002A44                          2479          *bsr     WORD_OUT_S
00002A44  6000 008A               2480          bra     ARDL_DST
00002A48                          2481  ARDL_SOURCE_LONG                        * down here, check long size
00002A48  0C39 0001 000032B7      2482          cmp.b   #1,SRC_REGISTER
00002A50  6600 0018               2483          bne     ARDL_SOURCE_DATA        * not Long size
00002A54  23D6 000032B8           2484          move.l  (a6), SRC_NUMBER_DATA
00002A5A  33DE 000032A2           2485          move.w  (a6)+,WORD_OUT
00002A60                          2486          * TODO: DELETE THIS
00002A60                          2487          *bsr     WORD_OUT_S
00002A60  33DE 000032A2           2488          move.w  (a6)+,WORD_OUT
00002A66                          2489          *TODO: DELETE THIS
00002A66                          2490          *bsr     WORD_OUT_S
00002A66  6000 0068               2491          bra     ARDL_DST
00002A6A                          2492  
00002A6A                          2493  ***DATA check
00002A6A                          2494  ARDL_SOURCE_DATA                        * down here, check #<data>
00002A6A  0C39 0004 000032B7      2495          cmp.b   #4,SRC_REGISTER
00002A72  6600 F78A               2496          bne     INVALID_S               * Here is the code we don't need to disassemble
00002A76                          2497  
00002A76                          2498  ARDL_SOURCE_DATA_BYTE
00002A76                          2499          * byte compare
00002A76  0C39 0001 000032C0      2500          cmp.b   #BYTE,SIZE
00002A7E  6600 0012               2501          bne     ARDL_SOURCE_DATA_WORD
00002A82  33D6 000032B8           2502          move.w  (a6),SRC_NUMBER_DATA
00002A88  33DE 000032A2           2503          move.w  (a6)+,WORD_OUT
00002A8E                          2504          * TODO: DELETE THIS
00002A8E                          2505          *bsr     WORD_OUT_S
00002A8E  6000 0040               2506          bra     ARDL_DST
00002A92                          2507  
00002A92                          2508  ARDL_SOURCE_DATA_WORD
00002A92  0C39 0011 000032C0      2509          cmp.b   #WORD,SIZE
00002A9A  6600 0012               2510          bne     ARDL_SOURCE_DATA_LONG
00002A9E  33D6 000032B8           2511          move.w  (a6),SRC_NUMBER_DATA
00002AA4  33DE 000032A2           2512          move.w  (a6)+,WORD_OUT
00002AAA                          2513          *TODO: DELETE THIS
00002AAA                          2514          *bsr     WORD_OUT_S
00002AAA  6000 0024               2515          bra     ARDL_DST
00002AAE                          2516  
00002AAE                          2517  ARDL_SOURCE_DATA_LONG
00002AAE  0C39 0010 000032C0      2518          cmp.b   #LONG,SIZE
00002AB6  6600 F746               2519          bne     INVALID_S
00002ABA  23D6 000032B8           2520          move.l  (a6), SRC_NUMBER_DATA
00002AC0  33DE 000032A2           2521          move.w  (a6)+,WORD_OUT
00002AC6                          2522          *TODO: DELETE THIS
00002AC6                          2523          *bsr     WORD_OUT_S
00002AC6  33DE 000032A2           2524          move.w  (a6)+,WORD_OUT
00002ACC                          2525          *TODO: DELETE THIS
00002ACC                          2526          *bsr     WORD_OUT_S
00002ACC  6000 0002               2527          bra     ARDL_DST 
00002AD0                          2528  
00002AD0                          2529  
00002AD0                          2530  ARDL_DST                 * Address extension for source is not required
00002AD0  0C39 0007 000032B5      2531          cmp.b   #7,DEST_MODE
00002AD8  6600 00A6               2532          bne     ARDL_FINAL_RTS
00002ADC                          2533  
00002ADC                          2534  ARDL_DST_WORD
00002ADC                          2535          * Word compare
00002ADC  0C39 0000 000032B4      2536          cmp.b   #0,DEST_REGISTER
00002AE4  6600 0012               2537          bne     ARDL_DST_LONG        * not word size
00002AE8  33D6 000032BC           2538          move.w  (a6),DST_NUMBER_DATA
00002AEE  33DE 000032A2           2539          move.w  (a6)+,WORD_OUT
00002AF4                          2540          *TODO: DELETE THIS
00002AF4                          2541          *bsr     WORD_OUT_S
00002AF4  6000 008A               2542          bra     ARDL_FINAL_RTS
00002AF8                          2543  ARDL_DST_LONG                        * down here, check long size
00002AF8  0C39 0001 000032B4      2544          cmp.b   #1,DEST_REGISTER
00002B00  6600 0018               2545          bne     ARDL_DST_DATA        * not Long size
00002B04  23D6 000032BC           2546          move.l  (a6), DST_NUMBER_DATA
00002B0A  33DE 000032A2           2547          move.w  (a6)+,WORD_OUT
00002B10                          2548          *TODO: DELETE THIS
00002B10                          2549          *bsr     WORD_OUT_S
00002B10  33DE 000032A2           2550          move.w  (a6)+,WORD_OUT
00002B16                          2551          *TODO: DELETE THIS
00002B16                          2552          *bsr     WORD_OUT_S
00002B16  6000 0068               2553          bra     ARDL_FINAL_RTS
00002B1A                          2554  
00002B1A                          2555  ***DATA check
00002B1A                          2556  ARDL_DST_DATA                        * down here, check #<data>
00002B1A  0C39 0004 000032B4      2557          cmp.b   #4,DEST_REGISTER
00002B22  6600 F6DA               2558          bne     INVALID_S               * Here is the code we don't need to disassemble
00002B26                          2559  
00002B26                          2560  ARDL_DST_DATA_BYTE
00002B26                          2561          * byte compare
00002B26  0C39 0001 000032C0      2562          cmp.b   #BYTE,SIZE
00002B2E  6600 0012               2563          bne     ARDL_DST_DATA_WORD
00002B32  33D6 000032BC           2564          move.w  (a6),DST_NUMBER_DATA
00002B38  33DE 000032A2           2565          move.w  (a6)+,WORD_OUT
00002B3E                          2566          *TODO: DELETE THIS
00002B3E                          2567          *bsr     WORD_OUT_S
00002B3E  6000 0040               2568          bra     ARDL_FINAL_RTS
00002B42                          2569  
00002B42                          2570  ARDL_DST_DATA_WORD
00002B42  0C39 0011 000032C0      2571          cmp.b   #WORD,SIZE
00002B4A  6600 0012               2572          bne     ARDL_DST_DATA_LONG
00002B4E  33D6 000032BC           2573          move.w  (a6),DST_NUMBER_DATA
00002B54  33DE 000032A2           2574          move.w  (a6)+,WORD_OUT
00002B5A                          2575          *TODO: DELETE THIS
00002B5A                          2576          *bsr     WORD_OUT_S
00002B5A  6000 0024               2577          bra     ARDL_FINAL_RTS
00002B5E                          2578  
00002B5E                          2579  ARDL_DST_DATA_LONG
00002B5E  0C39 0010 000032C0      2580          cmp.b   #LONG,SIZE
00002B66  6600 F696               2581          bne     INVALID_S
00002B6A  23D6 000032BC           2582          move.l  (a6), DST_NUMBER_DATA
00002B70  33DE 000032A2           2583          move.w  (a6)+,WORD_OUT
00002B76                          2584          *TODO: DELETE THIS
00002B76                          2585          *bsr     WORD_OUT_S
00002B76  33DE 000032A2           2586          move.w  (a6)+,WORD_OUT
00002B7C                          2587          *TODO: DELETE THIS
00002B7C                          2588          *bsr     WORD_OUT_S
00002B7C  6000 0002               2589          bra     ARDL_FINAL_RTS 
00002B80                          2590  * Address extension is not required
00002B80                          2591  ARDL_FINAL_RTS
00002B80  4E75                    2592          rts
00002B82                          2593  
00002B82                          2594  * -----------------------------------------------
00002B82                          2595  ***************************************************
00002B82                          2596  
00002B82                          2597  ***************************************************
00002B82                          2598  * -----------------------------------------------
00002B82                          2599  * Condition address decision load
00002B82                          2600  * BCC BGT BLE
00002B82                          2601  ** Using DATA_EIGHT_BIT, SRC_NUMBER_DATA
00002B82                          2602  CONDIITON_DECISION_LOAD
00002B82  0C39 0000 000032B3      2603          cmp.b           #$00,DATA_EIGHT_BIT
00002B8A  6700 0010               2604          beq             CDL_16
00002B8E  0C39 00FF 000032B3      2605          cmp.b           #$FF,DATA_EIGHT_BIT
00002B96  6700 000C               2606          beq             CDL_32
00002B9A                          2607  
00002B9A  4E75                    2608          rts
00002B9C                          2609  CDL_16
00002B9C                          2610          ** 16 bit displacement
00002B9C  33DE 000032B8           2611          move.w          (a6)+,SRC_NUMBER_DATA
00002BA2  4E75                    2612          rts
00002BA4                          2613  CDL_32
00002BA4                          2614          ** 32 bit displacement
00002BA4  23DE 000032B8           2615          move.l          (a6)+,SRC_NUMBER_DATA
00002BAA  4E75                    2616          rts
00002BAC                          2617  
00002BAC                          2618  * -----------------------------------------------
00002BAC                          2619  ***************************************************
00002BAC                          2620  
00002BAC                          2621          ** Based on mode setting, print out the instruction.
00002BAC                          2622  ***************************************************************
00002BAC                          2623  * -> Initial two ea out mode
00002BAC                          2624  INITIAL_TWO_EA_LOAD_OUT
00002BAC                          2625  ITELO_Dn
00002BAC  0C39 0000 000032B6      2626      cmp.b       #0,SRC_MODE
00002BB4  6600 00A2               2627      bne         ITELO_AN
00002BB8                          2628  
00002BB8                          2629      *** compare to d0 ~ d7
00002BB8                          2630  ITELO_D0
00002BB8  0C39 0000 000032B7      2631      cmp.b       #0,SRC_REGISTER
00002BC0  6600 000A               2632      bne         ITELO_D1
00002BC4  6100 F928               2633      bsr         D_ZERO_S
00002BC8  6000 049E               2634      bra         ITELO_FINAL
00002BCC                          2635  ITELO_D1
00002BCC  0C39 0001 000032B7      2636      cmp.b       #1,SRC_REGISTER
00002BD4  6600 000A               2637      bne         ITELO_D2
00002BD8  6100 F922               2638      bsr         D_ONE_S
00002BDC  6000 048A               2639      bra         ITELO_FINAL
00002BE0                          2640  ITELO_D2
00002BE0  0C39 0002 000032B7      2641      cmp.b       #2,SRC_REGISTER
00002BE8  6600 000A               2642      bne         ITELO_D3
00002BEC  6100 F91C               2643      bsr         D_TWO_S
00002BF0  6000 0476               2644      bra         ITELO_FINAL
00002BF4                          2645  ITELO_D3
00002BF4  0C39 0003 000032B7      2646      cmp.b       #3,SRC_REGISTER
00002BFC  6600 000A               2647      bne         ITELO_D4
00002C00  6100 F916               2648      bsr         D_THREE_S
00002C04  6000 0462               2649      bra         ITELO_FINAL
00002C08                          2650  ITELO_D4
00002C08  0C39 0004 000032B7      2651      cmp.b       #4,SRC_REGISTER
00002C10  6600 000A               2652      bne         ITELO_D5
00002C14  6100 F910               2653      bsr         D_FOUR_S
00002C18  6000 044E               2654      bra         ITELO_FINAL
00002C1C                          2655  ITELO_D5
00002C1C  0C39 0005 000032B7      2656      cmp.b       #5,SRC_REGISTER
00002C24  6600 000A               2657      bne         ITELO_D6
00002C28  6100 F90A               2658      bsr         D_FIVE_S
00002C2C  6000 043A               2659      bra         ITELO_FINAL
00002C30                          2660  ITELO_D6
00002C30  0C39 0006 000032B7      2661      cmp.b       #6,SRC_REGISTER
00002C38  6600 000A               2662      bne         ITELO_D7
00002C3C  6100 F904               2663      bsr         D_SIX_S
00002C40  6000 0426               2664      bra         ITELO_FINAL
00002C44                          2665  ITELO_D7
00002C44  0C39 0007 000032B7      2666      cmp.b       #7,SRC_REGISTER
00002C4C  6600 0416               2667      bne         ITELO_INVALID
00002C50  6100 F8FE               2668      bsr         D_SEVEN_S
00002C54  6000 0412               2669      bra         ITELO_FINAL
00002C58                          2670  * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
00002C58                          2671  
00002C58                          2672  ITELO_AN
00002C58  0C39 0001 000032B6      2673      cmp.b       #1,SRC_MODE
00002C60  6600 00A2               2674      bne         ITELO_AN_P
00002C64                          2675  
00002C64                          2676      *** compare to a0 ~ a7
00002C64                          2677  ITELO_A0
00002C64  0C39 0000 000032B7      2678      cmp.b       #0,SRC_REGISTER
00002C6C  6600 000A               2679      bne         ITELO_A1
00002C70  6100 F8EC               2680      bsr         A_ZERO_S
00002C74  6000 03F2               2681      bra         ITELO_FINAL
00002C78                          2682  ITELO_A1
00002C78  0C39 0001 000032B7      2683      cmp.b       #1,SRC_REGISTER
00002C80  6600 000A               2684      bne         ITELO_A2
00002C84  6100 F8E6               2685      bsr         A_ONE_S
00002C88  6000 03DE               2686      bra         ITELO_FINAL
00002C8C                          2687  ITELO_A2
00002C8C  0C39 0002 000032B7      2688      cmp.b       #2,SRC_REGISTER
00002C94  6600 000A               2689      bne         ITELO_A3
00002C98  6100 F8E0               2690      bsr         A_TWO_S
00002C9C  6000 03CA               2691      bra         ITELO_FINAL
00002CA0                          2692  ITELO_A3
00002CA0  0C39 0003 000032B7      2693      cmp.b       #3,SRC_REGISTER
00002CA8  6600 000A               2694      bne         ITELO_A4
00002CAC  6100 F8DA               2695      bsr         A_THREE_S
00002CB0  6000 03B6               2696      bra         ITELO_FINAL
00002CB4                          2697  ITELO_A4
00002CB4  0C39 0004 000032B7      2698      cmp.b       #4,SRC_REGISTER
00002CBC  6600 000A               2699      bne         ITELO_A5
00002CC0  6100 F8D4               2700      bsr         A_FOUR_S
00002CC4  6000 03A2               2701      bra         ITELO_FINAL
00002CC8                          2702  ITELO_A5
00002CC8  0C39 0005 000032B7      2703      cmp.b       #5,SRC_REGISTER
00002CD0  6600 000A               2704      bne         ITELO_A6
00002CD4  6100 F8CE               2705      bsr         A_FIVE_S
00002CD8  6000 038E               2706      bra         ITELO_FINAL
00002CDC                          2707  ITELO_A6
00002CDC  0C39 0006 000032B7      2708      cmp.b       #6,SRC_REGISTER
00002CE4  6600 000A               2709      bne         ITELO_A7
00002CE8  6100 F8C8               2710      bsr         A_SIX_S
00002CEC  6000 037A               2711      bra         ITELO_FINAL
00002CF0                          2712  ITELO_A7
00002CF0  0C39 0007 000032B7      2713      cmp.b       #7,SRC_REGISTER
00002CF8  6600 036A               2714      bne         ITELO_INVALID
00002CFC  6100 F8C2               2715      bsr         A_SEVEN_S
00002D00  6000 0366               2716      bra         ITELO_FINAL
00002D04                          2717  * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
00002D04                          2718  
00002D04                          2719  ITELO_AN_P
00002D04  0C39 0002 000032B6      2720      cmp.b       #2,SRC_MODE
00002D0C  6600 00A2               2721      bne         ITELO_AN_P_P
00002D10                          2722  
00002D10                          2723      *** compare to a0 ~ a7
00002D10                          2724  ITELO_A0_P
00002D10  0C39 0000 000032B7      2725      cmp.b       #0,SRC_REGISTER
00002D18  6600 000A               2726      bne         ITELO_A1_P
00002D1C  6100 F8B0               2727      bsr         A_ZERO_P_S
00002D20  6000 0346               2728      bra         ITELO_FINAL
00002D24                          2729  ITELO_A1_P
00002D24  0C39 0001 000032B7      2730      cmp.b       #1,SRC_REGISTER
00002D2C  6600 000A               2731      bne         ITELO_A2_P
00002D30  6100 F8AA               2732      bsr         A_ONE_P_S
00002D34  6000 0332               2733      bra         ITELO_FINAL
00002D38                          2734  ITELO_A2_P
00002D38  0C39 0002 000032B7      2735      cmp.b       #2,SRC_REGISTER
00002D40  6600 000A               2736      bne         ITELO_A3_P
00002D44  6100 F8A4               2737      bsr         A_TWO_P_S
00002D48  6000 031E               2738      bra         ITELO_FINAL
00002D4C                          2739  ITELO_A3_P
00002D4C  0C39 0003 000032B7      2740      cmp.b       #3,SRC_REGISTER
00002D54  6600 000A               2741      bne         ITELO_A4_P
00002D58  6100 F89E               2742      bsr         A_THREE_P_S
00002D5C  6000 030A               2743      bra         ITELO_FINAL
00002D60                          2744  ITELO_A4_P
00002D60  0C39 0004 000032B7      2745      cmp.b       #4,SRC_REGISTER
00002D68  6600 000A               2746      bne         ITELO_A5_P
00002D6C  6100 F898               2747      bsr         A_FOUR_P_S
00002D70  6000 02F6               2748      bra         ITELO_FINAL
00002D74                          2749  ITELO_A5_P
00002D74  0C39 0005 000032B7      2750      cmp.b       #5,SRC_REGISTER
00002D7C  6600 000A               2751      bne         ITELO_A6_P
00002D80  6100 F892               2752      bsr         A_FIVE_P_S
00002D84  6000 02E2               2753      bra         ITELO_FINAL
00002D88                          2754  ITELO_A6_P
00002D88  0C39 0006 000032B7      2755      cmp.b       #6,SRC_REGISTER
00002D90  6600 000A               2756      bne         ITELO_A7_P
00002D94  6100 F88C               2757      bsr         A_SIX_P_S
00002D98  6000 02CE               2758      bra         ITELO_FINAL
00002D9C                          2759  ITELO_A7_P
00002D9C  0C39 0007 000032B7      2760      cmp.b       #7,SRC_REGISTER
00002DA4  6600 02BE               2761      bne         ITELO_INVALID
00002DA8  6100 F886               2762      bsr         A_SEVEN_P_S
00002DAC  6000 02BA               2763      bra         ITELO_FINAL
00002DB0                          2764  * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
00002DB0                          2765  
00002DB0                          2766  ITELO_AN_P_P
00002DB0  0C39 0003 000032B6      2767      cmp.b       #3,SRC_MODE
00002DB8  6600 00C2               2768      bne         ITELO_AN_P_M
00002DBC                          2769  
00002DBC                          2770      *** compare to a0 ~ a7
00002DBC                          2771  ITELO_A0_P_P
00002DBC  0C39 0000 000032B7      2772      cmp.b       #0,SRC_REGISTER
00002DC4  6600 000E               2773      bne         ITELO_A1_P_P
00002DC8  6100 F804               2774      bsr         A_ZERO_P_S
00002DCC  6100 F870               2775      bsr         PLUS_S
00002DD0  6000 0296               2776      bra         ITELO_FINAL
00002DD4                          2777  ITELO_A1_P_P
00002DD4  0C39 0001 000032B7      2778      cmp.b       #1,SRC_REGISTER
00002DDC  6600 000E               2779      bne         ITELO_A2_P_P
00002DE0  6100 F7FA               2780      bsr         A_ONE_P_S
00002DE4  6100 F858               2781      bsr         PLUS_S
00002DE8  6000 027E               2782      bra         ITELO_FINAL
00002DEC                          2783  ITELO_A2_P_P
00002DEC  0C39 0002 000032B7      2784      cmp.b       #2,SRC_REGISTER
00002DF4  6600 000E               2785      bne         ITELO_A3_P_P
00002DF8  6100 F7F0               2786      bsr         A_TWO_P_S
00002DFC  6100 F840               2787      bsr         PLUS_S
00002E00  6000 0266               2788      bra         ITELO_FINAL
00002E04                          2789  ITELO_A3_P_P
00002E04  0C39 0003 000032B7      2790      cmp.b       #3,SRC_REGISTER
00002E0C  6600 000E               2791      bne         ITELO_A4_P_P
00002E10  6100 F7E6               2792      bsr         A_THREE_P_S
00002E14  6100 F828               2793      bsr         PLUS_S
00002E18  6000 024E               2794      bra         ITELO_FINAL
00002E1C                          2795  ITELO_A4_P_P
00002E1C  0C39 0004 000032B7      2796      cmp.b       #4,SRC_REGISTER
00002E24  6600 000E               2797      bne         ITELO_A5_P_P
00002E28  6100 F7DC               2798      bsr         A_FOUR_P_S
00002E2C  6100 F810               2799      bsr         PLUS_S
00002E30  6000 0236               2800      bra         ITELO_FINAL
00002E34                          2801  ITELO_A5_P_P
00002E34  0C39 0005 000032B7      2802      cmp.b       #5,SRC_REGISTER
00002E3C  6600 000E               2803      bne         ITELO_A6_P_P
00002E40  6100 F7D2               2804      bsr         A_FIVE_P_S
00002E44  6100 F7F8               2805      bsr         PLUS_S
00002E48  6000 021E               2806      bra         ITELO_FINAL
00002E4C                          2807  ITELO_A6_P_P
00002E4C  0C39 0006 000032B7      2808      cmp.b       #6,SRC_REGISTER
00002E54  6600 000E               2809      bne         ITELO_A7_P_P
00002E58  6100 F7C8               2810      bsr         A_SIX_P_S
00002E5C  6100 F7E0               2811      bsr         PLUS_S
00002E60  6000 0206               2812      bra         ITELO_FINAL
00002E64                          2813  ITELO_A7_P_P
00002E64  0C39 0007 000032B7      2814      cmp.b       #7,SRC_REGISTER
00002E6C  6600 01F6               2815      bne         ITELO_INVALID
00002E70  6100 F7BE               2816      bsr         A_SEVEN_P_S
00002E74  6100 F7C8               2817      bsr         PLUS_S
00002E78  6000 01EE               2818      bra         ITELO_FINAL
00002E7C                          2819  * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
00002E7C                          2820  
00002E7C                          2821  ITELO_AN_P_M
00002E7C  0C39 0004 000032B6      2822      cmp.b       #4,SRC_MODE
00002E84  6600 00C2               2823      bne         ITELO_ADR_WLD
00002E88                          2824  
00002E88                          2825      *** compare to a0 ~ a7
00002E88                          2826  ITELO_A0_P_M
00002E88  0C39 0000 000032B7      2827      cmp.b       #0,SRC_REGISTER
00002E90  6600 000E               2828      bne         ITELO_A1_P_M
00002E94  6100 F7B6               2829      bsr         MINUS_S
00002E98  6100 F734               2830      bsr         A_ZERO_P_S
00002E9C  6000 01CA               2831      bra         ITELO_FINAL
00002EA0                          2832  ITELO_A1_P_M
00002EA0  0C39 0001 000032B7      2833      cmp.b       #1,SRC_REGISTER
00002EA8  6600 000E               2834      bne         ITELO_A2_P_M
00002EAC  6100 F79E               2835      bsr         MINUS_S
00002EB0  6100 F72A               2836      bsr         A_ONE_P_S
00002EB4  6000 01B2               2837      bra         ITELO_FINAL
00002EB8                          2838  ITELO_A2_P_M
00002EB8  0C39 0002 000032B7      2839      cmp.b       #2,SRC_REGISTER
00002EC0  6600 000E               2840      bne         ITELO_A3_P_M
00002EC4  6100 F786               2841      bsr         MINUS_S
00002EC8  6100 F720               2842      bsr         A_TWO_P_S
00002ECC  6000 019A               2843      bra         ITELO_FINAL
00002ED0                          2844  ITELO_A3_P_M
00002ED0  0C39 0003 000032B7      2845      cmp.b       #3,SRC_REGISTER
00002ED8  6600 000E               2846      bne         ITELO_A4_P_M
00002EDC  6100 F76E               2847      bsr         MINUS_S
00002EE0  6100 F716               2848      bsr         A_THREE_P_S
00002EE4  6000 0182               2849      bra         ITELO_FINAL
00002EE8                          2850  ITELO_A4_P_M
00002EE8  0C39 0004 000032B7      2851      cmp.b       #4,SRC_REGISTER
00002EF0  6600 000E               2852      bne         ITELO_A5_P_M
00002EF4  6100 F756               2853      bsr         MINUS_S
00002EF8  6100 F70C               2854      bsr         A_FOUR_P_S
00002EFC  6000 016A               2855      bra         ITELO_FINAL
00002F00                          2856  ITELO_A5_P_M
00002F00  0C39 0005 000032B7      2857      cmp.b       #5,SRC_REGISTER
00002F08  6600 000E               2858      bne         ITELO_A6_P_M
00002F0C  6100 F73E               2859      bsr         MINUS_S
00002F10  6100 F702               2860      bsr         A_FIVE_P_S
00002F14  6000 0152               2861      bra         ITELO_FINAL
00002F18                          2862  ITELO_A6_P_M
00002F18  0C39 0006 000032B7      2863      cmp.b       #6,SRC_REGISTER
00002F20  6600 000E               2864      bne         ITELO_A7_P_M
00002F24  6100 F726               2865      bsr         MINUS_S
00002F28  6100 F6F8               2866      bsr         A_SIX_P_S
00002F2C  6000 013A               2867      bra         ITELO_FINAL
00002F30                          2868  ITELO_A7_P_M
00002F30  0C39 0007 000032B7      2869      cmp.b       #7,SRC_REGISTER
00002F38  6600 012A               2870      bne         ITELO_INVALID
00002F3C  6100 F70E               2871      bsr         MINUS_S
00002F40  6100 F6EE               2872      bsr         A_SEVEN_P_S
00002F44  6000 0122               2873      bra         ITELO_FINAL
00002F48                          2874  * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
00002F48                          2875  
00002F48                          2876  
00002F48                          2877  * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
00002F48                          2878  * WORD, LONG, DATA, (XXX).W (XXX).L #<data>
00002F48                          2879  ITELO_ADR_WLD
00002F48  0C39 0007 000032B6      2880      cmp.b       #7,SRC_MODE
00002F50  6600 0112               2881      bne         ITELO_INVALID
00002F54                          2882  ITELO_ADR_WLD_WORD
00002F54  0C39 0000 000032B7      2883      cmp.b       #0,SRC_REGISTER
00002F5C  6600 0030               2884      bne         ITELO_ADR_WLD_LONG
00002F60  6100 F6F8               2885      bsr         DOLLAR_S
00002F64                          2886  
00002F64  0C79 8000 000032B8      2887      cmp.w       #$8000,SRC_NUMBER_DATA
00002F6C  6500 000E               2888      bcs         ITELO_AWW_OUT
00002F70                          2889  ITELO_AWW_FFFF
00002F70  33FC FFFF 000032A2      2890      move.w      #$ffff,WORD_OUT
00002F78  6100 F312               2891      bsr         WORD_OUT_S
00002F7C                          2892  ITELO_AWW_OUT
00002F7C  33F9 000032B8 000032A2  2893      move.w      SRC_NUMBER_DATA,WORD_OUT
00002F86  6100 F304               2894      bsr         WORD_OUT_S
00002F8A                          2895  
00002F8A  6000 00DC               2896      bra         ITELO_FINAL
00002F8E                          2897  
00002F8E                          2898  
00002F8E                          2899  ITELO_ADR_WLD_LONG
00002F8E  0C39 0001 000032B7      2900      cmp.b       #1,SRC_REGISTER
00002F96  6600 003C               2901      bne         ITELO_ADR_WLD_DATA
00002F9A  6100 F6BE               2902      bsr         DOLLAR_S
00002F9E                          2903  
00002F9E  48E7 8000               2904      movem.l     d0,-(sp)
00002FA2                          2905  
00002FA2  0C79 0000 000032B8      2906      cmp.w       #$0000,SRC_NUMBER_DATA
00002FAA  6700 0010               2907      beq         ITELO_ADR_WLD_L_NPRCD
00002FAE                          2908  ITELO_ADR_WLD_L_PRCD
00002FAE  33F9 000032B8 000032A2  2909      move.w      SRC_NUMBER_DATA,WORD_OUT
00002FB8  6100 F2D2               2910      bsr         WORD_OUT_S
00002FBC                          2911  ITELO_ADR_WLD_L_NPRCD
00002FBC  2039 000032B8           2912      move.l      SRC_NUMBER_DATA,d0
00002FC2  33C0 000032A2           2913      move.w      d0,WORD_OUT
00002FC8  6100 F2C2               2914      bsr         WORD_OUT_S
00002FCC                          2915  
00002FCC  4CDF 0001               2916      movem.l     (sp)+,d0
00002FD0                          2917  
00002FD0  6000 0096               2918      bra         ITELO_FINAL
00002FD4                          2919  ITELO_ADR_WLD_DATA
00002FD4                          2920      ** Immediate data compare
00002FD4  0C39 0004 000032B7      2921      cmp.b       #4,SRC_REGISTER
00002FDC  6600 0086               2922      bne         ITELO_INVALID
00002FE0  6100 F686               2923      bsr         HASH_S
00002FE4  6100 F674               2924      bsr         DOLLAR_S
00002FE8                          2925  
00002FE8                          2926  ITELO_AWD_WORD
00002FE8                          2927      ** WORD SIZE
00002FE8  0C39 0011 000032C0      2928      cmp.b       #WORD,SIZE
00002FF0  6600 0014               2929      bne         ITELO_AWD_LONG
00002FF4  33F9 000032B8 000032A2  2930      move.w      SRC_NUMBER_DATA,WORD_OUT
00002FFE  6100 F28C               2931      bsr         WORD_OUT_S
00003002  6000 0064               2932      bra         ITELO_FINAL
00003006                          2933  ITELO_AWD_LONG
00003006                          2934      ** LONG SIZE
00003006  0C39 0010 000032C0      2935      cmp.b       #LONG,SIZE
0000300E  6600 002C               2936      bne         ITELO_AWD_BYTE
00003012                          2937  
00003012  48E7 8000               2938      movem.l     d0,-(sp)
00003016                          2939  
00003016  33F9 000032B8 000032A2  2940      move.w      SRC_NUMBER_DATA,WORD_OUT
00003020  6100 F26A               2941      bsr         WORD_OUT_S
00003024  2039 000032B8           2942      move.l      SRC_NUMBER_DATA,d0
0000302A  33C0 000032A2           2943      move.w      d0,WORD_OUT
00003030  6100 F25A               2944      bsr         WORD_OUT_S
00003034                          2945  
00003034  4CDF 0001               2946      movem.l     (sp)+,d0
00003038                          2947  
00003038  6000 002E               2948      bra         ITELO_FINAL
0000303C                          2949  
0000303C                          2950  ITELO_AWD_BYTE
0000303C                          2951      ** BYTE SIZE
0000303C  0C39 0001 000032C0      2952      cmp.b       #BYTE,SIZE
00003044  6600 001E               2953      bne         ITELO_INVALID
00003048                          2954  
00003048  48A7 8000               2955      movem.w     d0,-(sp)
0000304C                          2956  
0000304C  3039 000032B8           2957      move.w      SRC_NUMBER_DATA,d0
00003052  13C0 000032A0           2958      move.b      d0,BYTE_OUT
00003058  6100 F25C               2959      bsr         BYTE_OUT_S
0000305C                          2960  
0000305C  4C9F 0001               2961      movem.w     (sp)+,d0
00003060                          2962  
00003060  6000 0006               2963      bra         ITELO_FINAL
00003064                          2964  
00003064                          2965  ITELO_INVALID
00003064  6000 F198               2966      bra         INVALID_S
00003068                          2967  ITELO_FINAL
00003068  4E75                    2968      rts
0000306A                          2969  
0000306A                          2970  * -> Initial two ea out mode
0000306A                          2971  ***************************************************************
0000306A                          2972  
0000306A                          2973  ***************************************************************
0000306A                          2974  * -> Initial four ea out mode
0000306A                          2975  INITIAL_FOUR_EA_LOAD_OUT
0000306A  48E7 E000               2976      movem.l     d0-d2,-(sp)
0000306E                          2977  
0000306E  6100 FB3C               2978      bsr         INITIAL_TWO_EA_LOAD_OUT             * Source out
00003072                          2979  
00003072  6100 F602               2980      bsr         COMMA_S
00003076                          2981  
00003076  1039 000032B4           2982      move.b      DEST_REGISTER,d0
0000307C  1239 000032B5           2983      move.b      DEST_MODE,d1
00003082  2439 000032BC           2984      move.l      DST_NUMBER_DATA,d2
00003088                          2985  
00003088  13F9 000032B4 000032B7  2986      move.b      DEST_REGISTER,SRC_REGISTER          * Destination out
00003092  13F9 000032B5 000032B6  2987      move.b      DEST_MODE,SRC_MODE
0000309C  23F9 000032BC 000032B8  2988      move.l      DST_NUMBER_DATA,SRC_NUMBER_DATA
000030A6  4CDF 0007               2989      movem.l     (sp)+,d0-d2
000030AA  6100 FB00               2990      bsr         INITIAL_TWO_EA_LOAD_OUT
000030AE                          2991  
000030AE  4E75                    2992      rts
000030B0                          2993  
000030B0                          2994  * -> Initial four ea out mode
000030B0                          2995  ***************************************************************
000030B0                          2996  
000030B0                          2997  
000030B0                          2998  ***************************************************************
000030B0                          2999  * -> Memory structure | Register | Opmode | EA Mode | EA register |
000030B0                          3000  FOUR_OPCODE_LOAD_OUT
000030B0                          3001          * Invalid common operation
000030B0                          3002          ** Setting the size
000030B0  13F9 000032B5 000032C0  3003          move.b          DEST_MODE,SIZE
000030BA  6100 0162               3004          bsr             SIZE_CONVERT_TYPE_TWO
000030BE                          3005  
000030BE                          3006          * This is valid OR so printout OR.
000030BE  6100 F16E               3007          bsr             SIZE_TAG_S
000030C2                          3008  FOLO_DN
000030C2                          3009  
000030C2                          3010          * Check for OR instruction <ea> V Dn -> Dn format
000030C2  0C39 0004 000032B5      3011          cmp.b           #4,DEST_MODE
000030CA  6400 001A               3012          bcc             FOLO_EA
000030CE                          3013  
000030CE                          3014          * Set dest mode as register (Deception!!)
000030CE  13FC 0000 000032B5      3015          move.b          #$00,DEST_MODE
000030D6                          3016  
000030D6                          3017          * Based on deception, load memory
000030D6  6100 F94E               3018          bsr             ADDRESS_READ_DECISION_LOAD
000030DA                          3019  
000030DA                          3020          * Print out
000030DA  6100 F5C4               3021          bsr             TAB
000030DE  618A                    3022          bsr             INITIAL_FOUR_EA_LOAD_OUT
000030E0                          3023  
000030E0  6100 F5B0               3024          bsr             NEWLINE
000030E4  4E75                    3025          rts
000030E6                          3026  FOLO_EA
000030E6                          3027          * OR instruction and Dn V <ea> -> <ea> format
000030E6                          3028  
000030E6                          3029          * back up the Dest_register
000030E6  1E39 000032B4           3030          move.b          DEST_REGISTER,d7
000030EC  13F9 000032B6 000032B5  3031          move.b          SRC_MODE,DEST_MODE
000030F6  13F9 000032B7 000032B4  3032          move.b          SRC_REGISTER,DEST_REGISTER
00003100                          3033  
00003100  13FC 0000 000032B6      3034          move.b          #$00,SRC_MODE
00003108  13C7 000032B7           3035          move.b          d7,SRC_REGISTER
0000310E                          3036  
0000310E                          3037          * Based on deception, load memory
0000310E  6100 F916               3038          bsr             ADDRESS_READ_DECISION_LOAD
00003112                          3039  
00003112                          3040          * Print out
00003112  6100 F58C               3041          bsr             TAB
00003116  6100 FF52               3042          bsr             INITIAL_FOUR_EA_LOAD_OUT
0000311A                          3043  
0000311A  6100 F576               3044          bsr             NEWLINE
0000311E                          3045  
0000311E  4E75                    3046          rts
00003120                          3047  FOLO_INVALID
00003120  6000 F0DC               3048          bra             INVALID_S
00003124                          3049  
00003124                          3050  * -> Memory structure | Register | Opmode | EA Mode | EA register |
00003124                          3051  *******************************************************************
00003124                          3052  
00003124                          3053  
00003124                          3054  *******************************************************************
00003124                          3055  * Check whether current instruction is valid or not
00003124                          3056  IS_VALID
00003124                          3057  
00003124                          3058  IV_SRC
00003124  0C39 0005 000032B6      3059      cmp.b               #5,SRC_MODE
0000312C  6700 00B0               3060      beq                 IV_INVALID
00003130  0C39 0006 000032B6      3061      cmp.b               #6,SRC_MODE
00003138  6700 00A4               3062      beq                 IV_INVALID
0000313C                          3063  
0000313C  0C39 0004 000032B6      3064      cmp.b               #4,SRC_MODE
00003144  6300 000E               3065      bls                 IV_SRC_REG_CK1
00003148  0C39 0007 000032B6      3066      cmp.b               #7,SRC_MODE
00003150  6700 0012               3067      beq                 IV_SRC_REG_CK2             
00003154                          3068  
00003154                          3069  IV_SRC_REG_CK1
00003154  0C39 0007 000032B7      3070      cmp.b               #7,SRC_REGISTER
0000315C  6300 0022               3071      bls                 IV_DST
00003160  6000 007C               3072      bra                 IV_INVALID
00003164                          3073  IV_SRC_REG_CK2
00003164  0C39 0002 000032B7      3074      cmp.b               #2,SRC_REGISTER
0000316C  6700 0070               3075      beq                 IV_INVALID
00003170  0C39 0003 000032B7      3076      cmp.b               #3,SRC_REGISTER
00003178  6700 0064               3077      beq                 IV_INVALID
0000317C                          3078  
0000317C  6000 0002               3079      bra                 IV_DST
00003180                          3080  
00003180                          3081  IV_DST * Destination check
00003180  0C39 0005 000032B5      3082      cmp.b               #5,DEST_MODE
00003188  6700 0054               3083      beq                 IV_INVALID
0000318C  0C39 0006 000032B5      3084      cmp.b               #6,DEST_MODE
00003194  6700 0048               3085      beq                 IV_INVALID
00003198                          3086  
00003198  0C39 0004 000032B5      3087      cmp.b               #4,DEST_MODE
000031A0  6300 000E               3088      bls                 IV_DST_REG_CK1
000031A4  0C39 0007 000032B5      3089      cmp.b               #7,DEST_MODE
000031AC  6700 0012               3090      beq                 IV_DST_REG_CK2   
000031B0                          3091  
000031B0                          3092  IV_DST_REG_CK1
000031B0  0C39 0007 000032B4      3093      cmp.b               #7,DEST_REGISTER
000031B8  6300 0022               3094      bls                 IV_FINAL
000031BC  6000 0020               3095      bra                 IV_INVALID
000031C0                          3096  IV_DST_REG_CK2
000031C0  0C39 0002 000032B4      3097      cmp.b               #2,DEST_REGISTER
000031C8  6700 0014               3098      beq                 IV_INVALID
000031CC  0C39 0003 000032B4      3099      cmp.b               #3,DEST_REGISTER
000031D4  6700 0008               3100      beq                 IV_INVALID
000031D8                          3101  
000031D8  6000 0002               3102      bra                 IV_FINAL
000031DC                          3103  IV_FINAL
000031DC  4E75                    3104          rts
000031DE                          3105  IV_INVALID
000031DE  6000 F01E               3106      bra                 INVALID_S
000031E2                          3107  
000031E2                          3108  * Check whether current instruction is valid or not
000031E2                          3109  *******************************************************************
000031E2                          3110  
000031E2                          3111  
000031E2                          3112  ***************************************************************
000031E2                          3113  * Load instruction to print out
000031E2                          3114  
000031E2                          3115  **> Loaed instruction to print out
000031E2                          3116  ***************************************************************
000031E2                          3117  
000031E2                          3118  ** Reference Size 'Converting Table.txt'
000031E2                          3119  *
000031E2                          3120  
000031E2                          3121  * SIZE_CONVERT_TYPE_ONE
000031E2                          3122  * Size converting operation
000031E2                          3123  SIZE_CONVERT_TYPE_ONE
000031E2                          3124  ****Putting size into the destined size
000031E2                          3125  SCTO_BYTE
000031E2  0C39 0000 000032C0      3126          cmp.b           #0,SIZE
000031EA  6600 0008               3127          bne             SCTO_WORD
000031EE  6100 008E               3128          bsr             SIZE_BYTE
000031F2  4E75                    3129          rts
000031F4                          3130  SCTO_WORD
000031F4  0C39 0001 000032C0      3131          cmp.b           #1,SIZE
000031FC  6600 0008               3132          bne             SCTO_LONG
00003200  6100 0086               3133          bsr             SIZE_WORD
00003204  4E75                    3134          rts
00003206                          3135  SCTO_LONG
00003206  0C39 0002 000032C0      3136          cmp.b           #2,SIZE
0000320E  6600 0008               3137          bne             SCTO_INVALID
00003212  6100 007E               3138          bsr             SIZE_LONG
00003216  4E75                    3139          rts
00003218                          3140  SCTO_INVALID                           ** Invalid size instruction.
00003218  6000 EFE4               3141          bra             INVALID_S
0000321C  4E75                    3142          rts
0000321E                          3143  
0000321E                          3144  
0000321E                          3145  * Size converting type two
0000321E                          3146  SIZE_CONVERT_TYPE_TWO
0000321E                          3147  **** Putting size into the destined size
0000321E                          3148  
0000321E                          3149          ** Byte case %000, %100
0000321E  0C39 0000 000032C0      3150          cmp.b   #0,SIZE
00003226  6700 003E               3151          beq     SCTT_BYTE
0000322A  0C39 0004 000032C0      3152          cmp.b   #4,SIZE
00003232  6700 0032               3153          beq     SCTT_BYTE
00003236                          3154  
00003236                          3155          ** Word case %001, %101
00003236  0C39 0001 000032C0      3156          cmp.b   #1,SIZE
0000323E  6700 002C               3157          beq     SCTT_WORD
00003242  0C39 0005 000032C0      3158          cmp.b   #5,SIZE
0000324A  6700 0020               3159          beq     SCTT_WORD
0000324E                          3160  
0000324E                          3161          ** Long case %010, %110
0000324E  0C39 0002 000032C0      3162          cmp.b   #2,SIZE
00003256  6700 001A               3163          beq     SCTT_LONG
0000325A  0C39 0006 000032C0      3164          cmp.b   #6,SIZE
00003262  6700 000E               3165          beq     SCTT_LONG
00003266                          3166  
00003266                          3167  ** Set size byte
00003266                          3168  SCTT_BYTE
00003266  6100 0016               3169          bsr     SIZE_BYTE
0000326A  4E75                    3170          rts
0000326C                          3171  ** Set size word
0000326C                          3172  SCTT_WORD
0000326C  6100 001A               3173          bsr     SIZE_WORD
00003270  4E75                    3174          rts
00003272                          3175  ** Set size long
00003272                          3176  SCTT_LONG
00003272  6100 001E               3177          bsr     SIZE_LONG
00003276  4E75                    3178          rts
00003278                          3179  ** Invalid case
00003278                          3180  SCTT_INVALID
00003278  6000 EF84               3181          bra     INVALID_S
0000327C  4E75                    3182          rts
0000327E                          3183  
0000327E                          3184  * Set 'SIZE'
0000327E                          3185  SIZE_BYTE
0000327E  13FC 0001 000032C0      3186          move.b          #BYTE,SIZE
00003286  4E75                    3187          rts
00003288                          3188  SIZE_WORD
00003288  13FC 0011 000032C0      3189          move.b          #WORD,SIZE
00003290  4E75                    3190          rts
00003292                          3191  SIZE_LONG
00003292  13FC 0010 000032C0      3192          move.b          #LONG,SIZE
0000329A  4E75                    3193          rts
0000329C                          3194  
0000329C                          3195  *EXIT
0000329C                          3196  EXIT_PROGRAM
0000329C  FFFF FFFF               3197          SIMHALT
000032A0                          3198  
000032A0                          3199  
000032A0                          3200  **************************************************************************************************
000032A0                          3201  * Global Variable
000032A0                          3202  BYTE_OUT                ds.b            $1      Byte out reserved variable
000032A2                          3203  WORD_OUT                ds.w            $1      Word out reserved variable
000032A4                          3204  READ_FROM               ds.l            $1      Variable to save read From (Inclusive)
000032A8                          3205  READ_TO                 ds.l            $1      Varaible to save read To (Inclusive)
000032AC                          3206  Current_Read            ds.l            $1      Varaible to save current read
000032B0                          3207  
000032B0                          3208  * Variable specific for movem
000032B0                          3209  REGISTER_LIST_MASK      ds.w            $1      Register list Mask Variable for MOVEM
000032B2                          3210  
000032B2                          3211  * Bit Conversion reserved Area
000032B2                          3212  CONVERSOIN_RESERVED     ds.b            $1
000032B3                          3213  
000032B3                          3214  ** 8 bit instruction saving place
000032B3                          3215  DATA_EIGHT_BIT          ds.b            $1
000032B4                          3216  
000032B4                          3217  ** 3 bit instruction saving place
000032B4                          3218  DEST_REGISTER           ds.b            $1
000032B5                          3219  DEST_MODE               ds.b            $1
000032B6                          3220  SRC_MODE                ds.b            $1
000032B7                          3221  SRC_REGISTER            ds.b            $1
000032B8                          3222  
000032B8                          3223  *REGISTER                ds.b            $1
000032B8                          3224  *COUNT_REGISTER          ds.b            $1
000032B8                          3225  
000032B8                          3226  * Long data saving place for src and dst
000032B8                          3227  SRC_NUMBER_DATA         ds.l            $1
000032BC                          3228  DST_NUMBER_DATA         ds.l            $1
000032C0                          3229  
000032C0                          3230  ** 2 bit instructoin savin place
000032C0                          3231  *** 01 -- BYTE operation
000032C0                          3232  *** 11 -- word operation
000032C0                          3233  *** 10 -- long operation
000032C0                          3234  SIZE                    ds.b            $1
000032C1                          3235  
000032C1                          3236  
000032C1                          3237  * Local variable invoked
000032C1                          3238  * Local variable which will be invoked
000032C2                          3239  INITIAL_INSTRUCTION     ds.w            $1      Initial instruction variable
000032C4                          3240  MAIN_LOOP_COUNT         ds.b            $1      Loop count variable for main function
000032C5                          3241  
000032C5                          3242  * Variables - Alphabetical
000032C6                          3243  END_HEX                 ds.l        $1
000032CA                          3244  FLAG                    ds.b        $1
000032CC                          3245  START_HEX               ds.l        $1
000032D0                          3246  STRING                  ds.b        $8
000032D8                          3247  SWAP_HEX                ds.l        $1
000032DC                          3248  STR_LENGTH              ds.w        $1
000032DE                          3249  
000032DE                          3250  **************************************************************************************************
000032DE                          3251  
000032DE                          3252  
000032DE                          3253  
000032DE                          3254      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_MESSAGE        273E
ADDA_S              2462
ADDI_MESSAGE        26D6
ADDI_S              2320
ADDQ_MESSAGE        2705
ADDQ_S              23AC
ADDRESS_OUT         2266
ADDRESS_READ_DECISION_LOAD  2A26
ADD_MESSAGE         273A
ADD_S               2454
AND_MESSAGE         272C
AND_S               242A
ARDL_DST            2AD0
ARDL_DST_DATA       2B1A
ARDL_DST_DATA_BYTE  2B26
ARDL_DST_DATA_LONG  2B5E
ARDL_DST_DATA_WORD  2B42
ARDL_DST_LONG       2AF8
ARDL_DST_WORD       2ADC
ARDL_FINAL_RTS      2B80
ARDL_SOURCE         2A26
ARDL_SOURCE_DATA    2A6A
ARDL_SOURCE_DATA_BYTE  2A76
ARDL_SOURCE_DATA_LONG  2AAE
ARDL_SOURCE_DATA_WORD  2A92
ARDL_SOURCE_LONG    2A48
ARDL_SOURCE_WORD    2A32
ASL_MESSAGE         2747
ASL_S               247E
ASR_MESSAGE         2743
ASR_S               2470
A_FIVE_MESSAGE      2782
A_FIVE_P_MESSAGE    27A4
A_FIVE_P_S          2614
A_FIVE_S            25A4
A_FOUR_MESSAGE      277F
A_FOUR_P_MESSAGE    279F
A_FOUR_P_S          2606
A_FOUR_S            2596
A_ONE_MESSAGE       2776
A_ONE_P_MESSAGE     2790
A_ONE_P_S           25DC
A_ONE_S             256C
A_SEVEN_MESSAGE     2788
A_SEVEN_P_MESSAGE   27AE
A_SEVEN_P_S         2630
A_SEVEN_S           25C0
A_SIX_MESSAGE       2785
A_SIX_P_MESSAGE     27A9
A_SIX_P_S           2622
A_SIX_S             25B2
A_THREE_MESSAGE     277C
A_THREE_P_MESSAGE   279A
A_THREE_P_S         25F8
A_THREE_S           2588
A_TWO_MESSAGE       2779
A_TWO_P_MESSAGE     2795
A_TWO_P_S           25EA
A_TWO_S             257A
A_ZERO_MESSAGE      2773
A_ZERO_P_MESSAGE    278B
A_ZERO_P_S          25CE
A_ZERO_S            255E
BCC_MESSAGE         270A
BCC_S               23BA
BGT_MESSAGE         270E
BGT_S               23C8
BLE_MESSAGE         2712
BLE_S               23D6
BOP_0_TO_9          22FA
BOP_A_TO_F          230A
BOP_PRINT           2312
BO_FINAL            231A
BO_LOOP_GET_TWO     22C2
BO_PRINT            22E6
BO_PRINT_LOOP       22E8
BS                  8
BYTE                1
BYTE_MESSAGE        27BD
BYTE_OUT            32A0
BYTE_OUT_S          22B6
BYTE_S              24E0
CB_ELSE_LOWER_BOUND  1078
CB_ELSE_UPPER_BOUND  109A
CB_END              10BE
CB_ERROR_1          109E
CB_ERROR_2          10AE
CB_IF_LOWER_BOUND   105E
CB_IF_UPPER_BOUND   1080
CB_SET_FLAG         10BA
CDL_16              2B9C
CDL_32              2BA4
CEB_END             10F2
CHECK_BOUNDS        1048
CHECK_END_BOUNDS    10C0
CHECK_RESPONSE      110E
CHECK_START_BOUNDS  10F4
CLEAR_ALL_BIT_S     29F4
CLEAR_DATA          1172
CLEAR_SCREEN        26CA
CLEAR_THREE_BIT_S   2A04
CLEAR_TWO_BIT_S     2A1E
CLR_MESSAGE         26EB
CLR_S               2358
CMP_MESSAGE         2728
CMP_S               241C
COLLECT             1180
COMMA_MESSAGE       27C4
COMMA_S             2676
CONDIITON_DECISION_LOAD  2B82
CONVERSOIN_RESERVED  32B2
CR                  D
CRLF                27F7
CR_END              1170
CR_ERROR_1          1150
CR_ERROR_2          1160
CR_SET_FLAG         116C
CSB_END             110C
CURRENT_READ        32AC
DATA_EIGHT_BIT      32B3
DEST_MODE           32B5
DEST_REGISTER       32B4
DISASSEMBLE_FROM    7000
DIVU_MESSAGE        271F
DIVU_S              2400
DOLLAR_MESSAGE      27C0
DOLLAR_S            265A
DONE                1258
DST_NUMBER_DATA     32BC
D_FIVE_MESSAGE      276A
D_FIVE_S            2534
D_FOUR_MESSAGE      2767
D_FOUR_S            2526
D_ONE_MESSAGE       275E
D_ONE_S             24FC
D_SEVEN_MESSAGE     2770
D_SEVEN_S           2550
D_SIX_MESSAGE       276D
D_SIX_S             2542
D_THREE_MESSAGE     2764
D_THREE_S           2518
D_TWO_MESSAGE       2761
D_TWO_S             250A
D_ZERO_MESSAGE      275B
D_ZERO_S            24EE
END_HEX             32C6
ERROR_1             27FE
ERROR_2             2816
ERROR_3             2836
ERROR_4             2854
EXIT_PROGRAM        329C
FF                  C
FLAG                32CA
FOLO_DN             30C2
FOLO_EA             30E6
FOLO_INVALID        3120
FOUR_OPCODE_LOAD_OUT  30B0
HALT                136E
HASH_MESSAGE        27C2
HASH_S              2668
HT                  9
INITIAL_DATA_EIGHT_LOAD  29DE
INITIAL_FOUR_EA_LOAD  293A
INITIAL_FOUR_EA_LOAD_OUT  306A
INITIAL_INSTRUCTION  32C2
INITIAL_TWO_EA_LOAD  29A4
INITIAL_TWO_EA_LOAD_OUT  2BAC
INITIAL_TWO_EA_LOAD_SIZE  297A
INVALID_INSTRUCTION_MESSAGE  27C8
INVALID_S           21FE
IS_VALID            3124
ITELO_A0            2C64
ITELO_A0_P          2D10
ITELO_A0_P_M        2E88
ITELO_A0_P_P        2DBC
ITELO_A1            2C78
ITELO_A1_P          2D24
ITELO_A1_P_M        2EA0
ITELO_A1_P_P        2DD4
ITELO_A2            2C8C
ITELO_A2_P          2D38
ITELO_A2_P_M        2EB8
ITELO_A2_P_P        2DEC
ITELO_A3            2CA0
ITELO_A3_P          2D4C
ITELO_A3_P_M        2ED0
ITELO_A3_P_P        2E04
ITELO_A4            2CB4
ITELO_A4_P          2D60
ITELO_A4_P_M        2EE8
ITELO_A4_P_P        2E1C
ITELO_A5            2CC8
ITELO_A5_P          2D74
ITELO_A5_P_M        2F00
ITELO_A5_P_P        2E34
ITELO_A6            2CDC
ITELO_A6_P          2D88
ITELO_A6_P_M        2F18
ITELO_A6_P_P        2E4C
ITELO_A7            2CF0
ITELO_A7_P          2D9C
ITELO_A7_P_M        2F30
ITELO_A7_P_P        2E64
ITELO_ADR_WLD       2F48
ITELO_ADR_WLD_DATA  2FD4
ITELO_ADR_WLD_LONG  2F8E
ITELO_ADR_WLD_L_NPRCD  2FBC
ITELO_ADR_WLD_L_PRCD  2FAE
ITELO_ADR_WLD_WORD  2F54
ITELO_AN            2C58
ITELO_AN_P          2D04
ITELO_AN_P_M        2E7C
ITELO_AN_P_P        2DB0
ITELO_AWD_BYTE      303C
ITELO_AWD_LONG      3006
ITELO_AWD_WORD      2FE8
ITELO_AWW_FFFF      2F70
ITELO_AWW_OUT       2F7C
ITELO_D0            2BB8
ITELO_D1            2BCC
ITELO_D2            2BE0
ITELO_D3            2BF4
ITELO_D4            2C08
ITELO_D5            2C1C
ITELO_D6            2C30
ITELO_D7            2C44
ITELO_DN            2BAC
ITELO_FINAL         3068
ITELO_INVALID       3064
IV_DST              3180
IV_DST_REG_CK1      31B0
IV_DST_REG_CK2      31C0
IV_FINAL            31DC
IV_INVALID          31DE
IV_SRC              3124
IV_SRC_REG_CK1      3154
IV_SRC_REG_CK2      3164
JSR_MESSAGE         26F7
JSR_S               2382
LEA_MESSAGE         2701
LEA_S               239E
LF                  A
LONG                10
LONG_MESSAGE        27B7
LONG_S              24C4
LOWER_BOUND         3500
LSL_MESSAGE         274F
LSL_S               249A
LSR_MESSAGE         274B
LSR_S               248C
MAIN_LOOP           1280
MAIN_LOOP_COUNT     32C4
MAM_AND             1CD8
MAM_INVALID         1CE8
MAM_MULS            1C68
MAM_MULU            1CA0
MAR_TA_ASD          2064
MAR_TA_ASL          2084
MAR_TA_ASR          20A0
MAR_TA_LSD          20BC
MAR_TA_LSL          20DC
MAR_TA_LSR          20F8
MAR_TA_ROD          2114
MAR_TA_ROL          2134
MAR_TA_ROR          2150
MAR_TO_ADDRESS      2038
MAR_TO_REGISTER     1D82
MAS_ADDI            13C0
MAS_INVALID         13EC
MAS_OPERAND         13F0
MAS_SUBI            1394
MCADDDA_ADD         1CF0
MCADDDA_ADDA        1D18
MCADDDA_ADDA_LONG   1D34
MCADDDA_ADDA_OUT    1D44
MCADDDA_ADDA_OUT_AN  1D48
MCADDDA_ADDA_WORD   1D20
MCADDDA_INVALID     1D64
MCAQ_INVALID        199C
MCBC_INVALID        1ADA
MCBL_BCC            19CE
MCBL_BGT            19E2
MCBL_BLE            19F6
MCCP_INVALID        1C60
MCL_CLR             1512
MCL_INVALID         18F8
MCL_JSR             154A
MCL_LEA             1586
MCL_MM_LOAD_REGISTER_MASK  162C
MCL_MM_LONG         1608
MCL_MM_OPERAND      1640
MCL_MM_ORD_MEM_REG  17A4
MCL_MM_ORD_MEM_REG_A0  1848
MCL_MM_ORD_MEM_REG_A1  185C
MCL_MM_ORD_MEM_REG_A2  1870
MCL_MM_ORD_MEM_REG_A3  1884
MCL_MM_ORD_MEM_REG_A4  1898
MCL_MM_ORD_MEM_REG_A5  18AC
MCL_MM_ORD_MEM_REG_A6  18C0
MCL_MM_ORD_MEM_REG_A7  18D4
MCL_MM_ORD_MEM_REG_D0  17AC
MCL_MM_ORD_MEM_REG_D1  17BC
MCL_MM_ORD_MEM_REG_D2  17D0
MCL_MM_ORD_MEM_REG_D3  17E4
MCL_MM_ORD_MEM_REG_D4  17F8
MCL_MM_ORD_MEM_REG_D5  180C
MCL_MM_ORD_MEM_REG_D6  1820
MCL_MM_ORD_MEM_REG_D7  1834
MCL_MM_ORD_MEM_REG_LAST  18E8
MCL_MM_ORD_REG_MEM  165E
MCL_MM_ORD_REG_MEM_A0  16FA
MCL_MM_ORD_REG_MEM_A1  170E
MCL_MM_ORD_REG_MEM_A2  1722
MCL_MM_ORD_REG_MEM_A3  1736
MCL_MM_ORD_REG_MEM_A4  174A
MCL_MM_ORD_REG_MEM_A5  175E
MCL_MM_ORD_REG_MEM_A6  1772
MCL_MM_ORD_REG_MEM_A7  1786
MCL_MM_ORD_REG_MEM_D0  165E
MCL_MM_ORD_REG_MEM_D1  166E
MCL_MM_ORD_REG_MEM_D2  1682
MCL_MM_ORD_REG_MEM_D3  1696
MCL_MM_ORD_REG_MEM_D4  16AA
MCL_MM_ORD_REG_MEM_D5  16BE
MCL_MM_ORD_REG_MEM_D6  16D2
MCL_MM_ORD_REG_MEM_D7  16E6
MCL_MM_ORD_REG_MEM_LAST  179A
MCL_MM_ORD_SLASH    18EA
MCL_MM_ORD_SLASH_NOT  18F6
MCL_MM_OUT          1610
MCL_MM_WORD         15F8
MCL_MOVEM           15C2
MCL_NOP             14DA
MCL_RTS             14F6
MCMQ_INVALID        1B3E
MCOD_DIVU           1B46
MCOD_INVALID        1C0C
MCOD_OR             1B82
MCOD_OR_DN          1BA8
MCOD_OR_EA          1BD0
MCSB_INVALID        1C3C
MC_ADDI_SUBI        1394
MC_ADDI_SUBI_INST_CONVERTOR  1404
MC_ADDQ             1900
MC_ADDQ_FINAL       1938
MC_ADDQ_FINAL_DONE  194E
MC_ADD_ADDA         1CEC
MC_AND_MULU         1C64
MC_ASR_ROL          1D68
MC_ASR_ROL_FINAL    216C
MC_ASR_ROL_INVALID  2170
MC_BCGL             19A0
MC_BCGL_FINAL       1A0A
MC_BCGL_FINAL_16    1A64
MC_BCGL_FINAL_32    1AA4
MC_BCGL_FINAL_LAST  1ACE
MC_CLR_LEA          14DA
MC_CMP              1C40
MC_MOVEQ            1AE2
MC_MOVEQ_FINAL      1B3A
MC_MOVE_B           142A
MC_MOVE_L_MOVEA_L   1456
MC_MOVE_W_MOVEA_W   149A
MC_OR_DIVU          1B42
MC_SUB              1C10
MINUS_MESSAGE       27B5
MINUS_S             264C
MMLML_MOVEA_OUT     146A
MMLML_MOVE_OPERAND  1486
MMLML_MOVE_OUT      147E
MMLMW_MOVEA_OUT     14AE
MMLMW_MOVE_OPERAND  14C6
MMLMW_MOVE_OUT      14C2
MOVEA_MESSAGE       26E5
MOVEA_S             234A
MOVEM_MESSAGE       26FB
MOVEM_S             2390
MOVEQ_MESSAGE       2716
MOVEQ_S             23E4
MOVE_MESSAGE        26E0
MOVE_S              233C
MTR_DXDY            1D96
MTR_DXDY_ASD        1DD4
MTR_DXDY_ASL        1E04
MTR_DXDY_ASR        1DE4
MTR_DXDY_LSD        1E24
MTR_DXDY_LSL        1E54
MTR_DXDY_LSR        1E34
MTR_DXDY_ROD        1E74
MTR_DXDY_ROL        1EAC
MTR_DXDY_ROR        1E8C
MTR_EADY            1ECC
MTR_EADY_ASD        1F28
MTR_EADY_ASL        1F5C
MTR_EADY_ASR        1F38
MTR_EADY_DECISION   1F10
MTR_EADY_LSD        1F80
MTR_EADY_LSL        1FB4
MTR_EADY_LSR        1F90
MTR_EADY_ROD        1FD8
MTR_EADY_ROL        2014
MTR_EADY_ROR        1FF0
MULS_MESSAGE        2730
MULS_S              2438
MULU_MESSAGE        2735
MULU_S              2446
NEWLINE             2692
NEW_LINE            287B
NOP_MESSAGE         26EF
NOP_S               2366
ONE_BIT_ONLY        21CC
OR_MESSAGE          271C
OR_S                23F2
PAUSE               119A
PLUS_MESSAGE        27B3
PLUS_S              263E
PRESS_ENTER_MESSAGE  27DF
PRESS_ENTER_S       26BC
PROMPT_1            287F
PROMPT_2            28AB
PROMPT_3            28AD
PROMPT_4            28C8
PROMPT_5            28F3
PROMPT_6            28F5
PROMPT_7            2910
PROMPT_END          1022
PROMPT_END_ADDRESS  11AC
PROMPT_START        100C
PROMPT_START_ADDRESS  11C6
READ_FROM           32A4
READ_TO             32A8
REGISTER_LIST_MASK  32B0
REPROMPT            11E0
ROL_MESSAGE         2757
ROL_S               24B6
ROR_MESSAGE         2753
ROR_S               24A8
RTS_MESSAGE         26F3
RTS_S               2374
SCTO_BYTE           31E2
SCTO_INVALID        3218
SCTO_LONG           3206
SCTO_WORD           31F4
SCTT_BYTE           3266
SCTT_INVALID        3278
SCTT_LONG           3272
SCTT_WORD           326C
SIZE                32C0
SIZE_BYTE           327E
SIZE_CONVERT_TYPE_ONE  31E2
SIZE_CONVERT_TYPE_TWO  321E
SIZE_LONG           3292
SIZE_TAG_S          222E
SIZE_WORD           3288
SLASH_MESSAGE       27C6
SLASH_S             2684
SPACE               27FC
SPACE_S             26AE
SRC_MODE            32B6
SRC_NUMBER_DATA     32B8
SRC_REGISTER        32B7
STACK               100000
START               1000
START_HEX           32CC
STH_SKIP_SHIFT      1246
STH_SKIP_SUBI       1238
STRING              32D0
STR_LENGTH          32DC
STR_TO_HEX          11FA
STS_DOT_BYTE_OUT    222E
STS_DOT_LONG_OUT    2252
STS_DOT_WORD_OUT    2240
STS_INVALID_SIZE    2264
SUBI_MESSAGE        26DB
SUBI_S              232E
SUB_MESSAGE         2724
SUB_S               240E
SWAP_HEX            32D8
TAB                 26A0
TAB_SPACE           27FA
THREE_BIT_ONLY      2174
TWO_BIT_ONLY        219E
UPPER_BOUND         9FFF
VT                  B
WAIT_ENTER          1386
WORD                11
WORD_MESSAGE        27BA
WORD_OUT            32A2
WORD_OUT_S          228C
WORD_S              24D2
WOS_FINAL           22B0
WOS_LOOP            2292
_00000000           10F2
_00000001           1130
_00000002           1138
_00000003           1144
_00000004           114C
_00000005           121C
_00000006           122E
_00000007           1238
_20000000           120A
_20000001           1248
